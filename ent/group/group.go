// Code generated by ent, DO NOT EDIT.

package group

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the group type in the database.
	Label = "group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldImg holds the string denoting the img field in the database.
	FieldImg = "img"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// EdgeOwnerUser holds the string denoting the owner_user edge name in mutations.
	EdgeOwnerUser = "owner_user"
	// EdgeGroupRelationGroup holds the string denoting the group_relation_group edge name in mutations.
	EdgeGroupRelationGroup = "group_relation_group"
	// EdgeTargetMsg holds the string denoting the target_msg edge name in mutations.
	EdgeTargetMsg = "target_msg"
	// Table holds the table name of the group in the database.
	Table = "t_group"
	// OwnerUserTable is the table that holds the owner_user relation/edge.
	OwnerUserTable = "t_group"
	// OwnerUserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerUserInverseTable = "t_user"
	// OwnerUserColumn is the table column denoting the owner_user relation/edge.
	OwnerUserColumn = "user_id"
	// GroupRelationGroupTable is the table that holds the group_relation_group relation/edge.
	GroupRelationGroupTable = "t_group_relation"
	// GroupRelationGroupInverseTable is the table name for the GroupRelation entity.
	// It exists in this package in order to avoid circular dependency with the "grouprelation" package.
	GroupRelationGroupInverseTable = "t_group_relation"
	// GroupRelationGroupColumn is the table column denoting the group_relation_group relation/edge.
	GroupRelationGroupColumn = "group_id"
	// TargetMsgTable is the table that holds the target_msg relation/edge.
	TargetMsgTable = "t_group_msg"
	// TargetMsgInverseTable is the table name for the GroupMsg entity.
	// It exists in this package in order to avoid circular dependency with the "groupmsg" package.
	TargetMsgInverseTable = "t_group_msg"
	// TargetMsgColumn is the table column denoting the target_msg relation/edge.
	TargetMsgColumn = "target_id"
)

// Columns holds all SQL columns for group fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldDeletedAt,
	FieldName,
	FieldUserID,
	FieldImg,
	FieldDesc,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultImg holds the default value on creation for the "img" field.
	DefaultImg string
	// DefaultDesc holds the default value on creation for the "desc" field.
	DefaultDesc string
)

// OrderOption defines the ordering options for the Group queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByImg orders the results by the img field.
func ByImg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImg, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByOwnerUserField orders the results by owner_user field.
func ByOwnerUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByGroupRelationGroupCount orders the results by group_relation_group count.
func ByGroupRelationGroupCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupRelationGroupStep(), opts...)
	}
}

// ByGroupRelationGroup orders the results by group_relation_group terms.
func ByGroupRelationGroup(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupRelationGroupStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTargetMsgCount orders the results by target_msg count.
func ByTargetMsgCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTargetMsgStep(), opts...)
	}
}

// ByTargetMsg orders the results by target_msg terms.
func ByTargetMsg(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetMsgStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerUserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerUserTable, OwnerUserColumn),
	)
}
func newGroupRelationGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupRelationGroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroupRelationGroupTable, GroupRelationGroupColumn),
	)
}
func newTargetMsgStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetMsgInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TargetMsgTable, TargetMsgColumn),
	)
}
