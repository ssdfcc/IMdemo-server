// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-zero-chat/ent/group"
	"go-zero-chat/ent/groupmsg"
	"go-zero-chat/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// GroupMsg is the model entity for the GroupMsg schema.
type GroupMsg struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 删除时间
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// 发送者id
	OwnerID int `json:"owner_id,omitempty"`
	// 群id
	TargetID int `json:"target_id,omitempty"`
	// 消息类型 1文字 2表情包 3图片 4音频 5视频
	Media int `json:"media,omitempty"`
	// 消息内容
	Content string `json:"content,omitempty"`
	// 图片相关
	Pic string `json:"pic,omitempty"`
	// url相关
	URL string `json:"url,omitempty"`
	// 描述相关
	Desc string `json:"desc,omitempty"`
	// 其他数字统计
	Amount int `json:"amount,omitempty"`
	// 类型
	Type int `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupMsgQuery when eager-loading is set.
	Edges        GroupMsgEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GroupMsgEdges holds the relations/edges for other nodes in the graph.
type GroupMsgEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupMsgEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupMsgEdges) GroupOrErr() (*Group, error) {
	if e.loadedTypes[1] {
		if e.Group == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: group.Label}
		}
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupMsg) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupmsg.FieldID, groupmsg.FieldOwnerID, groupmsg.FieldTargetID, groupmsg.FieldMedia, groupmsg.FieldAmount, groupmsg.FieldType:
			values[i] = new(sql.NullInt64)
		case groupmsg.FieldContent, groupmsg.FieldPic, groupmsg.FieldURL, groupmsg.FieldDesc:
			values[i] = new(sql.NullString)
		case groupmsg.FieldCreatedAt, groupmsg.FieldUpdatedAt, groupmsg.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupMsg fields.
func (gm *GroupMsg) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupmsg.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gm.ID = int(value.Int64)
		case groupmsg.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gm.CreatedAt = value.Time
			}
		case groupmsg.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gm.UpdatedAt = value.Time
			}
		case groupmsg.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				gm.DeletedAt = new(time.Time)
				*gm.DeletedAt = value.Time
			}
		case groupmsg.FieldOwnerID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field owner_id", values[i])
			} else if value.Valid {
				gm.OwnerID = int(value.Int64)
			}
		case groupmsg.FieldTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_id", values[i])
			} else if value.Valid {
				gm.TargetID = int(value.Int64)
			}
		case groupmsg.FieldMedia:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field media", values[i])
			} else if value.Valid {
				gm.Media = int(value.Int64)
			}
		case groupmsg.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				gm.Content = value.String
			}
		case groupmsg.FieldPic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pic", values[i])
			} else if value.Valid {
				gm.Pic = value.String
			}
		case groupmsg.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				gm.URL = value.String
			}
		case groupmsg.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				gm.Desc = value.String
			}
		case groupmsg.FieldAmount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				gm.Amount = int(value.Int64)
			}
		case groupmsg.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				gm.Type = int(value.Int64)
			}
		default:
			gm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GroupMsg.
// This includes values selected through modifiers, order, etc.
func (gm *GroupMsg) Value(name string) (ent.Value, error) {
	return gm.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the GroupMsg entity.
func (gm *GroupMsg) QueryUser() *UserQuery {
	return NewGroupMsgClient(gm.config).QueryUser(gm)
}

// QueryGroup queries the "group" edge of the GroupMsg entity.
func (gm *GroupMsg) QueryGroup() *GroupQuery {
	return NewGroupMsgClient(gm.config).QueryGroup(gm)
}

// Update returns a builder for updating this GroupMsg.
// Note that you need to call GroupMsg.Unwrap() before calling this method if this GroupMsg
// was returned from a transaction, and the transaction was committed or rolled back.
func (gm *GroupMsg) Update() *GroupMsgUpdateOne {
	return NewGroupMsgClient(gm.config).UpdateOne(gm)
}

// Unwrap unwraps the GroupMsg entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gm *GroupMsg) Unwrap() *GroupMsg {
	_tx, ok := gm.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupMsg is not a transactional entity")
	}
	gm.config.driver = _tx.drv
	return gm
}

// String implements the fmt.Stringer.
func (gm *GroupMsg) String() string {
	var builder strings.Builder
	builder.WriteString("GroupMsg(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gm.ID))
	builder.WriteString("created_at=")
	builder.WriteString(gm.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gm.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := gm.DeletedAt; v != nil {
		builder.WriteString("deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("owner_id=")
	builder.WriteString(fmt.Sprintf("%v", gm.OwnerID))
	builder.WriteString(", ")
	builder.WriteString("target_id=")
	builder.WriteString(fmt.Sprintf("%v", gm.TargetID))
	builder.WriteString(", ")
	builder.WriteString("media=")
	builder.WriteString(fmt.Sprintf("%v", gm.Media))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(gm.Content)
	builder.WriteString(", ")
	builder.WriteString("pic=")
	builder.WriteString(gm.Pic)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(gm.URL)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(gm.Desc)
	builder.WriteString(", ")
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", gm.Amount))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", gm.Type))
	builder.WriteByte(')')
	return builder.String()
}

// GroupMsgs is a parsable slice of GroupMsg.
type GroupMsgs []*GroupMsg
