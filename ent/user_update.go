// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-zero-chat/ent/contact"
	"go-zero-chat/ent/file"
	"go-zero-chat/ent/group"
	"go-zero-chat/ent/groupmsg"
	"go-zero-chat/ent/grouprelation"
	"go-zero-chat/ent/message"
	"go-zero-chat/ent/predicate"
	"go-zero-chat/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetAvatar sets the "avatar" field.
func (uu *UserUpdate) SetAvatar(s string) *UserUpdate {
	uu.mutation.SetAvatar(s)
	return uu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatar(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatar(*s)
	}
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetClientIP sets the "client_ip" field.
func (uu *UserUpdate) SetClientIP(s string) *UserUpdate {
	uu.mutation.SetClientIP(s)
	return uu
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (uu *UserUpdate) SetNillableClientIP(s *string) *UserUpdate {
	if s != nil {
		uu.SetClientIP(*s)
	}
	return uu
}

// SetClientPort sets the "client_port" field.
func (uu *UserUpdate) SetClientPort(s string) *UserUpdate {
	uu.mutation.SetClientPort(s)
	return uu
}

// SetNillableClientPort sets the "client_port" field if the given value is not nil.
func (uu *UserUpdate) SetNillableClientPort(s *string) *UserUpdate {
	if s != nil {
		uu.SetClientPort(*s)
	}
	return uu
}

// SetSalt sets the "salt" field.
func (uu *UserUpdate) SetSalt(s string) *UserUpdate {
	uu.mutation.SetSalt(s)
	return uu
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSalt(s *string) *UserUpdate {
	if s != nil {
		uu.SetSalt(*s)
	}
	return uu
}

// SetLoginTime sets the "login_time" field.
func (uu *UserUpdate) SetLoginTime(t time.Time) *UserUpdate {
	uu.mutation.SetLoginTime(t)
	return uu
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLoginTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLoginTime(*t)
	}
	return uu
}

// ClearLoginTime clears the value of the "login_time" field.
func (uu *UserUpdate) ClearLoginTime() *UserUpdate {
	uu.mutation.ClearLoginTime()
	return uu
}

// SetHeartbeatTime sets the "heartbeat_time" field.
func (uu *UserUpdate) SetHeartbeatTime(t time.Time) *UserUpdate {
	uu.mutation.SetHeartbeatTime(t)
	return uu
}

// SetNillableHeartbeatTime sets the "heartbeat_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableHeartbeatTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetHeartbeatTime(*t)
	}
	return uu
}

// ClearHeartbeatTime clears the value of the "heartbeat_time" field.
func (uu *UserUpdate) ClearHeartbeatTime() *UserUpdate {
	uu.mutation.ClearHeartbeatTime()
	return uu
}

// SetLogoutTime sets the "logout_time" field.
func (uu *UserUpdate) SetLogoutTime(t time.Time) *UserUpdate {
	uu.mutation.SetLogoutTime(t)
	return uu
}

// SetNillableLogoutTime sets the "logout_time" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLogoutTime(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetLogoutTime(*t)
	}
	return uu
}

// ClearLogoutTime clears the value of the "logout_time" field.
func (uu *UserUpdate) ClearLogoutTime() *UserUpdate {
	uu.mutation.ClearLogoutTime()
	return uu
}

// SetIsLogout sets the "is_logout" field.
func (uu *UserUpdate) SetIsLogout(b bool) *UserUpdate {
	uu.mutation.SetIsLogout(b)
	return uu
}

// SetNillableIsLogout sets the "is_logout" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsLogout(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsLogout(*b)
	}
	return uu
}

// SetDeviceInfo sets the "device_info" field.
func (uu *UserUpdate) SetDeviceInfo(s string) *UserUpdate {
	uu.mutation.SetDeviceInfo(s)
	return uu
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeviceInfo(s *string) *UserUpdate {
	if s != nil {
		uu.SetDeviceInfo(*s)
	}
	return uu
}

// AddFormMsgIDs adds the "form_msg" edge to the Message entity by IDs.
func (uu *UserUpdate) AddFormMsgIDs(ids ...int) *UserUpdate {
	uu.mutation.AddFormMsgIDs(ids...)
	return uu
}

// AddFormMsg adds the "form_msg" edges to the Message entity.
func (uu *UserUpdate) AddFormMsg(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddFormMsgIDs(ids...)
}

// AddTargetMsgIDs adds the "target_msg" edge to the Message entity by IDs.
func (uu *UserUpdate) AddTargetMsgIDs(ids ...int) *UserUpdate {
	uu.mutation.AddTargetMsgIDs(ids...)
	return uu
}

// AddTargetMsg adds the "target_msg" edges to the Message entity.
func (uu *UserUpdate) AddTargetMsg(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.AddTargetMsgIDs(ids...)
}

// AddContactOwnerIDs adds the "contact_owner" edge to the Contact entity by IDs.
func (uu *UserUpdate) AddContactOwnerIDs(ids ...int) *UserUpdate {
	uu.mutation.AddContactOwnerIDs(ids...)
	return uu
}

// AddContactOwner adds the "contact_owner" edges to the Contact entity.
func (uu *UserUpdate) AddContactOwner(c ...*Contact) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddContactOwnerIDs(ids...)
}

// AddContactTargetIDs adds the "contact_target" edge to the Contact entity by IDs.
func (uu *UserUpdate) AddContactTargetIDs(ids ...int) *UserUpdate {
	uu.mutation.AddContactTargetIDs(ids...)
	return uu
}

// AddContactTarget adds the "contact_target" edges to the Contact entity.
func (uu *UserUpdate) AddContactTarget(c ...*Contact) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddContactTargetIDs(ids...)
}

// AddGroupRelationUserIDs adds the "group_relation_user" edge to the GroupRelation entity by IDs.
func (uu *UserUpdate) AddGroupRelationUserIDs(ids ...int) *UserUpdate {
	uu.mutation.AddGroupRelationUserIDs(ids...)
	return uu
}

// AddGroupRelationUser adds the "group_relation_user" edges to the GroupRelation entity.
func (uu *UserUpdate) AddGroupRelationUser(g ...*GroupRelation) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroupRelationUserIDs(ids...)
}

// AddGroupOwnerIDs adds the "group_owner" edge to the Group entity by IDs.
func (uu *UserUpdate) AddGroupOwnerIDs(ids ...int) *UserUpdate {
	uu.mutation.AddGroupOwnerIDs(ids...)
	return uu
}

// AddGroupOwner adds the "group_owner" edges to the Group entity.
func (uu *UserUpdate) AddGroupOwner(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroupOwnerIDs(ids...)
}

// AddGroupMsgIDs adds the "group_msg" edge to the GroupMsg entity by IDs.
func (uu *UserUpdate) AddGroupMsgIDs(ids ...int) *UserUpdate {
	uu.mutation.AddGroupMsgIDs(ids...)
	return uu
}

// AddGroupMsg adds the "group_msg" edges to the GroupMsg entity.
func (uu *UserUpdate) AddGroupMsg(g ...*GroupMsg) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroupMsgIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (uu *UserUpdate) AddFileIDs(ids ...int) *UserUpdate {
	uu.mutation.AddFileIDs(ids...)
	return uu
}

// AddFiles adds the "files" edges to the File entity.
func (uu *UserUpdate) AddFiles(f ...*File) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.AddFileIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearFormMsg clears all "form_msg" edges to the Message entity.
func (uu *UserUpdate) ClearFormMsg() *UserUpdate {
	uu.mutation.ClearFormMsg()
	return uu
}

// RemoveFormMsgIDs removes the "form_msg" edge to Message entities by IDs.
func (uu *UserUpdate) RemoveFormMsgIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveFormMsgIDs(ids...)
	return uu
}

// RemoveFormMsg removes "form_msg" edges to Message entities.
func (uu *UserUpdate) RemoveFormMsg(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveFormMsgIDs(ids...)
}

// ClearTargetMsg clears all "target_msg" edges to the Message entity.
func (uu *UserUpdate) ClearTargetMsg() *UserUpdate {
	uu.mutation.ClearTargetMsg()
	return uu
}

// RemoveTargetMsgIDs removes the "target_msg" edge to Message entities by IDs.
func (uu *UserUpdate) RemoveTargetMsgIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveTargetMsgIDs(ids...)
	return uu
}

// RemoveTargetMsg removes "target_msg" edges to Message entities.
func (uu *UserUpdate) RemoveTargetMsg(m ...*Message) *UserUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uu.RemoveTargetMsgIDs(ids...)
}

// ClearContactOwner clears all "contact_owner" edges to the Contact entity.
func (uu *UserUpdate) ClearContactOwner() *UserUpdate {
	uu.mutation.ClearContactOwner()
	return uu
}

// RemoveContactOwnerIDs removes the "contact_owner" edge to Contact entities by IDs.
func (uu *UserUpdate) RemoveContactOwnerIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveContactOwnerIDs(ids...)
	return uu
}

// RemoveContactOwner removes "contact_owner" edges to Contact entities.
func (uu *UserUpdate) RemoveContactOwner(c ...*Contact) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveContactOwnerIDs(ids...)
}

// ClearContactTarget clears all "contact_target" edges to the Contact entity.
func (uu *UserUpdate) ClearContactTarget() *UserUpdate {
	uu.mutation.ClearContactTarget()
	return uu
}

// RemoveContactTargetIDs removes the "contact_target" edge to Contact entities by IDs.
func (uu *UserUpdate) RemoveContactTargetIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveContactTargetIDs(ids...)
	return uu
}

// RemoveContactTarget removes "contact_target" edges to Contact entities.
func (uu *UserUpdate) RemoveContactTarget(c ...*Contact) *UserUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveContactTargetIDs(ids...)
}

// ClearGroupRelationUser clears all "group_relation_user" edges to the GroupRelation entity.
func (uu *UserUpdate) ClearGroupRelationUser() *UserUpdate {
	uu.mutation.ClearGroupRelationUser()
	return uu
}

// RemoveGroupRelationUserIDs removes the "group_relation_user" edge to GroupRelation entities by IDs.
func (uu *UserUpdate) RemoveGroupRelationUserIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveGroupRelationUserIDs(ids...)
	return uu
}

// RemoveGroupRelationUser removes "group_relation_user" edges to GroupRelation entities.
func (uu *UserUpdate) RemoveGroupRelationUser(g ...*GroupRelation) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroupRelationUserIDs(ids...)
}

// ClearGroupOwner clears all "group_owner" edges to the Group entity.
func (uu *UserUpdate) ClearGroupOwner() *UserUpdate {
	uu.mutation.ClearGroupOwner()
	return uu
}

// RemoveGroupOwnerIDs removes the "group_owner" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveGroupOwnerIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveGroupOwnerIDs(ids...)
	return uu
}

// RemoveGroupOwner removes "group_owner" edges to Group entities.
func (uu *UserUpdate) RemoveGroupOwner(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroupOwnerIDs(ids...)
}

// ClearGroupMsg clears all "group_msg" edges to the GroupMsg entity.
func (uu *UserUpdate) ClearGroupMsg() *UserUpdate {
	uu.mutation.ClearGroupMsg()
	return uu
}

// RemoveGroupMsgIDs removes the "group_msg" edge to GroupMsg entities by IDs.
func (uu *UserUpdate) RemoveGroupMsgIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveGroupMsgIDs(ids...)
	return uu
}

// RemoveGroupMsg removes "group_msg" edges to GroupMsg entities.
func (uu *UserUpdate) RemoveGroupMsg(g ...*GroupMsg) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroupMsgIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (uu *UserUpdate) ClearFiles() *UserUpdate {
	uu.mutation.ClearFiles()
	return uu
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (uu *UserUpdate) RemoveFileIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveFileIDs(ids...)
	return uu
}

// RemoveFiles removes "files" edges to File entities.
func (uu *UserUpdate) RemoveFiles(f ...*File) *UserUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uu.RemoveFileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.ClientIP(); ok {
		_spec.SetField(user.FieldClientIP, field.TypeString, value)
	}
	if value, ok := uu.mutation.ClientPort(); ok {
		_spec.SetField(user.FieldClientPort, field.TypeString, value)
	}
	if value, ok := uu.mutation.Salt(); ok {
		_spec.SetField(user.FieldSalt, field.TypeString, value)
	}
	if value, ok := uu.mutation.LoginTime(); ok {
		_spec.SetField(user.FieldLoginTime, field.TypeTime, value)
	}
	if uu.mutation.LoginTimeCleared() {
		_spec.ClearField(user.FieldLoginTime, field.TypeTime)
	}
	if value, ok := uu.mutation.HeartbeatTime(); ok {
		_spec.SetField(user.FieldHeartbeatTime, field.TypeTime, value)
	}
	if uu.mutation.HeartbeatTimeCleared() {
		_spec.ClearField(user.FieldHeartbeatTime, field.TypeTime)
	}
	if value, ok := uu.mutation.LogoutTime(); ok {
		_spec.SetField(user.FieldLogoutTime, field.TypeTime, value)
	}
	if uu.mutation.LogoutTimeCleared() {
		_spec.ClearField(user.FieldLogoutTime, field.TypeTime)
	}
	if value, ok := uu.mutation.IsLogout(); ok {
		_spec.SetField(user.FieldIsLogout, field.TypeBool, value)
	}
	if value, ok := uu.mutation.DeviceInfo(); ok {
		_spec.SetField(user.FieldDeviceInfo, field.TypeString, value)
	}
	if uu.mutation.FormMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FormMsgTable,
			Columns: []string{user.FormMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFormMsgIDs(); len(nodes) > 0 && !uu.mutation.FormMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FormMsgTable,
			Columns: []string{user.FormMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FormMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FormMsgTable,
			Columns: []string{user.FormMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TargetMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TargetMsgTable,
			Columns: []string{user.TargetMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedTargetMsgIDs(); len(nodes) > 0 && !uu.mutation.TargetMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TargetMsgTable,
			Columns: []string{user.TargetMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TargetMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TargetMsgTable,
			Columns: []string{user.TargetMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ContactOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactOwnerTable,
			Columns: []string{user.ContactOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedContactOwnerIDs(); len(nodes) > 0 && !uu.mutation.ContactOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactOwnerTable,
			Columns: []string{user.ContactOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ContactOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactOwnerTable,
			Columns: []string{user.ContactOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ContactTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactTargetTable,
			Columns: []string{user.ContactTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedContactTargetIDs(); len(nodes) > 0 && !uu.mutation.ContactTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactTargetTable,
			Columns: []string{user.ContactTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ContactTargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactTargetTable,
			Columns: []string{user.ContactTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroupRelationUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupRelationUserTable,
			Columns: []string{user.GroupRelationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouprelation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupRelationUserIDs(); len(nodes) > 0 && !uu.mutation.GroupRelationUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupRelationUserTable,
			Columns: []string{user.GroupRelationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouprelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupRelationUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupRelationUserTable,
			Columns: []string{user.GroupRelationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouprelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroupOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupOwnerTable,
			Columns: []string{user.GroupOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupOwnerIDs(); len(nodes) > 0 && !uu.mutation.GroupOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupOwnerTable,
			Columns: []string{user.GroupOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupOwnerTable,
			Columns: []string{user.GroupOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroupMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMsgTable,
			Columns: []string{user.GroupMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmsg.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupMsgIDs(); len(nodes) > 0 && !uu.mutation.GroupMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMsgTable,
			Columns: []string{user.GroupMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmsg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMsgTable,
			Columns: []string{user.GroupMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmsg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedFilesIDs(); len(nodes) > 0 && !uu.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetAvatar sets the "avatar" field.
func (uuo *UserUpdateOne) SetAvatar(s string) *UserUpdateOne {
	uuo.mutation.SetAvatar(s)
	return uuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatar(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatar(*s)
	}
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetClientIP sets the "client_ip" field.
func (uuo *UserUpdateOne) SetClientIP(s string) *UserUpdateOne {
	uuo.mutation.SetClientIP(s)
	return uuo
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableClientIP(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetClientIP(*s)
	}
	return uuo
}

// SetClientPort sets the "client_port" field.
func (uuo *UserUpdateOne) SetClientPort(s string) *UserUpdateOne {
	uuo.mutation.SetClientPort(s)
	return uuo
}

// SetNillableClientPort sets the "client_port" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableClientPort(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetClientPort(*s)
	}
	return uuo
}

// SetSalt sets the "salt" field.
func (uuo *UserUpdateOne) SetSalt(s string) *UserUpdateOne {
	uuo.mutation.SetSalt(s)
	return uuo
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSalt(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSalt(*s)
	}
	return uuo
}

// SetLoginTime sets the "login_time" field.
func (uuo *UserUpdateOne) SetLoginTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLoginTime(t)
	return uuo
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLoginTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLoginTime(*t)
	}
	return uuo
}

// ClearLoginTime clears the value of the "login_time" field.
func (uuo *UserUpdateOne) ClearLoginTime() *UserUpdateOne {
	uuo.mutation.ClearLoginTime()
	return uuo
}

// SetHeartbeatTime sets the "heartbeat_time" field.
func (uuo *UserUpdateOne) SetHeartbeatTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetHeartbeatTime(t)
	return uuo
}

// SetNillableHeartbeatTime sets the "heartbeat_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableHeartbeatTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetHeartbeatTime(*t)
	}
	return uuo
}

// ClearHeartbeatTime clears the value of the "heartbeat_time" field.
func (uuo *UserUpdateOne) ClearHeartbeatTime() *UserUpdateOne {
	uuo.mutation.ClearHeartbeatTime()
	return uuo
}

// SetLogoutTime sets the "logout_time" field.
func (uuo *UserUpdateOne) SetLogoutTime(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLogoutTime(t)
	return uuo
}

// SetNillableLogoutTime sets the "logout_time" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLogoutTime(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetLogoutTime(*t)
	}
	return uuo
}

// ClearLogoutTime clears the value of the "logout_time" field.
func (uuo *UserUpdateOne) ClearLogoutTime() *UserUpdateOne {
	uuo.mutation.ClearLogoutTime()
	return uuo
}

// SetIsLogout sets the "is_logout" field.
func (uuo *UserUpdateOne) SetIsLogout(b bool) *UserUpdateOne {
	uuo.mutation.SetIsLogout(b)
	return uuo
}

// SetNillableIsLogout sets the "is_logout" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsLogout(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsLogout(*b)
	}
	return uuo
}

// SetDeviceInfo sets the "device_info" field.
func (uuo *UserUpdateOne) SetDeviceInfo(s string) *UserUpdateOne {
	uuo.mutation.SetDeviceInfo(s)
	return uuo
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeviceInfo(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDeviceInfo(*s)
	}
	return uuo
}

// AddFormMsgIDs adds the "form_msg" edge to the Message entity by IDs.
func (uuo *UserUpdateOne) AddFormMsgIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddFormMsgIDs(ids...)
	return uuo
}

// AddFormMsg adds the "form_msg" edges to the Message entity.
func (uuo *UserUpdateOne) AddFormMsg(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddFormMsgIDs(ids...)
}

// AddTargetMsgIDs adds the "target_msg" edge to the Message entity by IDs.
func (uuo *UserUpdateOne) AddTargetMsgIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddTargetMsgIDs(ids...)
	return uuo
}

// AddTargetMsg adds the "target_msg" edges to the Message entity.
func (uuo *UserUpdateOne) AddTargetMsg(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.AddTargetMsgIDs(ids...)
}

// AddContactOwnerIDs adds the "contact_owner" edge to the Contact entity by IDs.
func (uuo *UserUpdateOne) AddContactOwnerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddContactOwnerIDs(ids...)
	return uuo
}

// AddContactOwner adds the "contact_owner" edges to the Contact entity.
func (uuo *UserUpdateOne) AddContactOwner(c ...*Contact) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddContactOwnerIDs(ids...)
}

// AddContactTargetIDs adds the "contact_target" edge to the Contact entity by IDs.
func (uuo *UserUpdateOne) AddContactTargetIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddContactTargetIDs(ids...)
	return uuo
}

// AddContactTarget adds the "contact_target" edges to the Contact entity.
func (uuo *UserUpdateOne) AddContactTarget(c ...*Contact) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddContactTargetIDs(ids...)
}

// AddGroupRelationUserIDs adds the "group_relation_user" edge to the GroupRelation entity by IDs.
func (uuo *UserUpdateOne) AddGroupRelationUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddGroupRelationUserIDs(ids...)
	return uuo
}

// AddGroupRelationUser adds the "group_relation_user" edges to the GroupRelation entity.
func (uuo *UserUpdateOne) AddGroupRelationUser(g ...*GroupRelation) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroupRelationUserIDs(ids...)
}

// AddGroupOwnerIDs adds the "group_owner" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddGroupOwnerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddGroupOwnerIDs(ids...)
	return uuo
}

// AddGroupOwner adds the "group_owner" edges to the Group entity.
func (uuo *UserUpdateOne) AddGroupOwner(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroupOwnerIDs(ids...)
}

// AddGroupMsgIDs adds the "group_msg" edge to the GroupMsg entity by IDs.
func (uuo *UserUpdateOne) AddGroupMsgIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddGroupMsgIDs(ids...)
	return uuo
}

// AddGroupMsg adds the "group_msg" edges to the GroupMsg entity.
func (uuo *UserUpdateOne) AddGroupMsg(g ...*GroupMsg) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroupMsgIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (uuo *UserUpdateOne) AddFileIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddFileIDs(ids...)
	return uuo
}

// AddFiles adds the "files" edges to the File entity.
func (uuo *UserUpdateOne) AddFiles(f ...*File) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.AddFileIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearFormMsg clears all "form_msg" edges to the Message entity.
func (uuo *UserUpdateOne) ClearFormMsg() *UserUpdateOne {
	uuo.mutation.ClearFormMsg()
	return uuo
}

// RemoveFormMsgIDs removes the "form_msg" edge to Message entities by IDs.
func (uuo *UserUpdateOne) RemoveFormMsgIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveFormMsgIDs(ids...)
	return uuo
}

// RemoveFormMsg removes "form_msg" edges to Message entities.
func (uuo *UserUpdateOne) RemoveFormMsg(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveFormMsgIDs(ids...)
}

// ClearTargetMsg clears all "target_msg" edges to the Message entity.
func (uuo *UserUpdateOne) ClearTargetMsg() *UserUpdateOne {
	uuo.mutation.ClearTargetMsg()
	return uuo
}

// RemoveTargetMsgIDs removes the "target_msg" edge to Message entities by IDs.
func (uuo *UserUpdateOne) RemoveTargetMsgIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveTargetMsgIDs(ids...)
	return uuo
}

// RemoveTargetMsg removes "target_msg" edges to Message entities.
func (uuo *UserUpdateOne) RemoveTargetMsg(m ...*Message) *UserUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uuo.RemoveTargetMsgIDs(ids...)
}

// ClearContactOwner clears all "contact_owner" edges to the Contact entity.
func (uuo *UserUpdateOne) ClearContactOwner() *UserUpdateOne {
	uuo.mutation.ClearContactOwner()
	return uuo
}

// RemoveContactOwnerIDs removes the "contact_owner" edge to Contact entities by IDs.
func (uuo *UserUpdateOne) RemoveContactOwnerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveContactOwnerIDs(ids...)
	return uuo
}

// RemoveContactOwner removes "contact_owner" edges to Contact entities.
func (uuo *UserUpdateOne) RemoveContactOwner(c ...*Contact) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveContactOwnerIDs(ids...)
}

// ClearContactTarget clears all "contact_target" edges to the Contact entity.
func (uuo *UserUpdateOne) ClearContactTarget() *UserUpdateOne {
	uuo.mutation.ClearContactTarget()
	return uuo
}

// RemoveContactTargetIDs removes the "contact_target" edge to Contact entities by IDs.
func (uuo *UserUpdateOne) RemoveContactTargetIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveContactTargetIDs(ids...)
	return uuo
}

// RemoveContactTarget removes "contact_target" edges to Contact entities.
func (uuo *UserUpdateOne) RemoveContactTarget(c ...*Contact) *UserUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveContactTargetIDs(ids...)
}

// ClearGroupRelationUser clears all "group_relation_user" edges to the GroupRelation entity.
func (uuo *UserUpdateOne) ClearGroupRelationUser() *UserUpdateOne {
	uuo.mutation.ClearGroupRelationUser()
	return uuo
}

// RemoveGroupRelationUserIDs removes the "group_relation_user" edge to GroupRelation entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupRelationUserIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveGroupRelationUserIDs(ids...)
	return uuo
}

// RemoveGroupRelationUser removes "group_relation_user" edges to GroupRelation entities.
func (uuo *UserUpdateOne) RemoveGroupRelationUser(g ...*GroupRelation) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroupRelationUserIDs(ids...)
}

// ClearGroupOwner clears all "group_owner" edges to the Group entity.
func (uuo *UserUpdateOne) ClearGroupOwner() *UserUpdateOne {
	uuo.mutation.ClearGroupOwner()
	return uuo
}

// RemoveGroupOwnerIDs removes the "group_owner" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupOwnerIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveGroupOwnerIDs(ids...)
	return uuo
}

// RemoveGroupOwner removes "group_owner" edges to Group entities.
func (uuo *UserUpdateOne) RemoveGroupOwner(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroupOwnerIDs(ids...)
}

// ClearGroupMsg clears all "group_msg" edges to the GroupMsg entity.
func (uuo *UserUpdateOne) ClearGroupMsg() *UserUpdateOne {
	uuo.mutation.ClearGroupMsg()
	return uuo
}

// RemoveGroupMsgIDs removes the "group_msg" edge to GroupMsg entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupMsgIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveGroupMsgIDs(ids...)
	return uuo
}

// RemoveGroupMsg removes "group_msg" edges to GroupMsg entities.
func (uuo *UserUpdateOne) RemoveGroupMsg(g ...*GroupMsg) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroupMsgIDs(ids...)
}

// ClearFiles clears all "files" edges to the File entity.
func (uuo *UserUpdateOne) ClearFiles() *UserUpdateOne {
	uuo.mutation.ClearFiles()
	return uuo
}

// RemoveFileIDs removes the "files" edge to File entities by IDs.
func (uuo *UserUpdateOne) RemoveFileIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveFileIDs(ids...)
	return uuo
}

// RemoveFiles removes "files" edges to File entities.
func (uuo *UserUpdateOne) RemoveFiles(f ...*File) *UserUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uuo.RemoveFileIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ClientIP(); ok {
		_spec.SetField(user.FieldClientIP, field.TypeString, value)
	}
	if value, ok := uuo.mutation.ClientPort(); ok {
		_spec.SetField(user.FieldClientPort, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Salt(); ok {
		_spec.SetField(user.FieldSalt, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LoginTime(); ok {
		_spec.SetField(user.FieldLoginTime, field.TypeTime, value)
	}
	if uuo.mutation.LoginTimeCleared() {
		_spec.ClearField(user.FieldLoginTime, field.TypeTime)
	}
	if value, ok := uuo.mutation.HeartbeatTime(); ok {
		_spec.SetField(user.FieldHeartbeatTime, field.TypeTime, value)
	}
	if uuo.mutation.HeartbeatTimeCleared() {
		_spec.ClearField(user.FieldHeartbeatTime, field.TypeTime)
	}
	if value, ok := uuo.mutation.LogoutTime(); ok {
		_spec.SetField(user.FieldLogoutTime, field.TypeTime, value)
	}
	if uuo.mutation.LogoutTimeCleared() {
		_spec.ClearField(user.FieldLogoutTime, field.TypeTime)
	}
	if value, ok := uuo.mutation.IsLogout(); ok {
		_spec.SetField(user.FieldIsLogout, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.DeviceInfo(); ok {
		_spec.SetField(user.FieldDeviceInfo, field.TypeString, value)
	}
	if uuo.mutation.FormMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FormMsgTable,
			Columns: []string{user.FormMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFormMsgIDs(); len(nodes) > 0 && !uuo.mutation.FormMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FormMsgTable,
			Columns: []string{user.FormMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FormMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FormMsgTable,
			Columns: []string{user.FormMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TargetMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TargetMsgTable,
			Columns: []string{user.TargetMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedTargetMsgIDs(); len(nodes) > 0 && !uuo.mutation.TargetMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TargetMsgTable,
			Columns: []string{user.TargetMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TargetMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TargetMsgTable,
			Columns: []string{user.TargetMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ContactOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactOwnerTable,
			Columns: []string{user.ContactOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedContactOwnerIDs(); len(nodes) > 0 && !uuo.mutation.ContactOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactOwnerTable,
			Columns: []string{user.ContactOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ContactOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactOwnerTable,
			Columns: []string{user.ContactOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ContactTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactTargetTable,
			Columns: []string{user.ContactTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedContactTargetIDs(); len(nodes) > 0 && !uuo.mutation.ContactTargetCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactTargetTable,
			Columns: []string{user.ContactTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ContactTargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactTargetTable,
			Columns: []string{user.ContactTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroupRelationUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupRelationUserTable,
			Columns: []string{user.GroupRelationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouprelation.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupRelationUserIDs(); len(nodes) > 0 && !uuo.mutation.GroupRelationUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupRelationUserTable,
			Columns: []string{user.GroupRelationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouprelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupRelationUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupRelationUserTable,
			Columns: []string{user.GroupRelationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouprelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroupOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupOwnerTable,
			Columns: []string{user.GroupOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupOwnerIDs(); len(nodes) > 0 && !uuo.mutation.GroupOwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupOwnerTable,
			Columns: []string{user.GroupOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupOwnerTable,
			Columns: []string{user.GroupOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroupMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMsgTable,
			Columns: []string{user.GroupMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmsg.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupMsgIDs(); len(nodes) > 0 && !uuo.mutation.GroupMsgCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMsgTable,
			Columns: []string{user.GroupMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmsg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMsgTable,
			Columns: []string{user.GroupMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmsg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedFilesIDs(); len(nodes) > 0 && !uuo.mutation.FilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
