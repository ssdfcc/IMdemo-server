// Code generated by ent, DO NOT EDIT.

package groupmsg

import (
	"go-zero-chat/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldDeletedAt, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldOwnerID, v))
}

// TargetID applies equality check predicate on the "target_id" field. It's identical to TargetIDEQ.
func TargetID(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldTargetID, v))
}

// Media applies equality check predicate on the "media" field. It's identical to MediaEQ.
func Media(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldMedia, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldContent, v))
}

// Pic applies equality check predicate on the "pic" field. It's identical to PicEQ.
func Pic(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldPic, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldURL, v))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldDesc, v))
}

// Amount applies equality check predicate on the "amount" field. It's identical to AmountEQ.
func Amount(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldAmount, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotNull(FieldDeletedAt))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldOwnerID, vs...))
}

// TargetIDEQ applies the EQ predicate on the "target_id" field.
func TargetIDEQ(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldTargetID, v))
}

// TargetIDNEQ applies the NEQ predicate on the "target_id" field.
func TargetIDNEQ(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldTargetID, v))
}

// TargetIDIn applies the In predicate on the "target_id" field.
func TargetIDIn(vs ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldTargetID, vs...))
}

// TargetIDNotIn applies the NotIn predicate on the "target_id" field.
func TargetIDNotIn(vs ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldTargetID, vs...))
}

// MediaEQ applies the EQ predicate on the "media" field.
func MediaEQ(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldMedia, v))
}

// MediaNEQ applies the NEQ predicate on the "media" field.
func MediaNEQ(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldMedia, v))
}

// MediaIn applies the In predicate on the "media" field.
func MediaIn(vs ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldMedia, vs...))
}

// MediaNotIn applies the NotIn predicate on the "media" field.
func MediaNotIn(vs ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldMedia, vs...))
}

// MediaGT applies the GT predicate on the "media" field.
func MediaGT(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldMedia, v))
}

// MediaGTE applies the GTE predicate on the "media" field.
func MediaGTE(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldMedia, v))
}

// MediaLT applies the LT predicate on the "media" field.
func MediaLT(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldMedia, v))
}

// MediaLTE applies the LTE predicate on the "media" field.
func MediaLTE(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldMedia, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldContainsFold(FieldContent, v))
}

// PicEQ applies the EQ predicate on the "pic" field.
func PicEQ(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldPic, v))
}

// PicNEQ applies the NEQ predicate on the "pic" field.
func PicNEQ(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldPic, v))
}

// PicIn applies the In predicate on the "pic" field.
func PicIn(vs ...string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldPic, vs...))
}

// PicNotIn applies the NotIn predicate on the "pic" field.
func PicNotIn(vs ...string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldPic, vs...))
}

// PicGT applies the GT predicate on the "pic" field.
func PicGT(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldPic, v))
}

// PicGTE applies the GTE predicate on the "pic" field.
func PicGTE(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldPic, v))
}

// PicLT applies the LT predicate on the "pic" field.
func PicLT(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldPic, v))
}

// PicLTE applies the LTE predicate on the "pic" field.
func PicLTE(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldPic, v))
}

// PicContains applies the Contains predicate on the "pic" field.
func PicContains(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldContains(FieldPic, v))
}

// PicHasPrefix applies the HasPrefix predicate on the "pic" field.
func PicHasPrefix(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldHasPrefix(FieldPic, v))
}

// PicHasSuffix applies the HasSuffix predicate on the "pic" field.
func PicHasSuffix(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldHasSuffix(FieldPic, v))
}

// PicEqualFold applies the EqualFold predicate on the "pic" field.
func PicEqualFold(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEqualFold(FieldPic, v))
}

// PicContainsFold applies the ContainsFold predicate on the "pic" field.
func PicContainsFold(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldContainsFold(FieldPic, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldContainsFold(FieldURL, v))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldHasSuffix(FieldDesc, v))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldContainsFold(FieldDesc, v))
}

// AmountEQ applies the EQ predicate on the "amount" field.
func AmountEQ(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldAmount, v))
}

// AmountNEQ applies the NEQ predicate on the "amount" field.
func AmountNEQ(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldAmount, v))
}

// AmountIn applies the In predicate on the "amount" field.
func AmountIn(vs ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldAmount, vs...))
}

// AmountNotIn applies the NotIn predicate on the "amount" field.
func AmountNotIn(vs ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldAmount, vs...))
}

// AmountGT applies the GT predicate on the "amount" field.
func AmountGT(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldAmount, v))
}

// AmountGTE applies the GTE predicate on the "amount" field.
func AmountGTE(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldAmount, v))
}

// AmountLT applies the LT predicate on the "amount" field.
func AmountLT(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldAmount, v))
}

// AmountLTE applies the LTE predicate on the "amount" field.
func AmountLTE(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldAmount, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.GroupMsg {
	return predicate.GroupMsg(sql.FieldLTE(FieldType, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.GroupMsg {
	return predicate.GroupMsg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.GroupMsg {
	return predicate.GroupMsg(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.GroupMsg {
	return predicate.GroupMsg(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.GroupMsg {
	return predicate.GroupMsg(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GroupMsg) predicate.GroupMsg {
	return predicate.GroupMsg(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GroupMsg) predicate.GroupMsg {
	return predicate.GroupMsg(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupMsg) predicate.GroupMsg {
	return predicate.GroupMsg(sql.NotPredicates(p))
}
