// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-zero-chat/ent/group"
	"go-zero-chat/ent/grouprelation"
	"go-zero-chat/ent/predicate"
	"go-zero-chat/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GroupRelationUpdate is the builder for updating GroupRelation entities.
type GroupRelationUpdate struct {
	config
	hooks    []Hook
	mutation *GroupRelationMutation
}

// Where appends a list predicates to the GroupRelationUpdate builder.
func (gru *GroupRelationUpdate) Where(ps ...predicate.GroupRelation) *GroupRelationUpdate {
	gru.mutation.Where(ps...)
	return gru
}

// SetUpdatedAt sets the "updated_at" field.
func (gru *GroupRelationUpdate) SetUpdatedAt(t time.Time) *GroupRelationUpdate {
	gru.mutation.SetUpdatedAt(t)
	return gru
}

// SetDeletedAt sets the "deleted_at" field.
func (gru *GroupRelationUpdate) SetDeletedAt(t time.Time) *GroupRelationUpdate {
	gru.mutation.SetDeletedAt(t)
	return gru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gru *GroupRelationUpdate) SetNillableDeletedAt(t *time.Time) *GroupRelationUpdate {
	if t != nil {
		gru.SetDeletedAt(*t)
	}
	return gru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gru *GroupRelationUpdate) ClearDeletedAt() *GroupRelationUpdate {
	gru.mutation.ClearDeletedAt()
	return gru
}

// SetGroupID sets the "group_id" field.
func (gru *GroupRelationUpdate) SetGroupID(i int) *GroupRelationUpdate {
	gru.mutation.SetGroupID(i)
	return gru
}

// SetUserID sets the "user_id" field.
func (gru *GroupRelationUpdate) SetUserID(i int) *GroupRelationUpdate {
	gru.mutation.SetUserID(i)
	return gru
}

// SetType sets the "type" field.
func (gru *GroupRelationUpdate) SetType(i int) *GroupRelationUpdate {
	gru.mutation.ResetType()
	gru.mutation.SetType(i)
	return gru
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gru *GroupRelationUpdate) SetNillableType(i *int) *GroupRelationUpdate {
	if i != nil {
		gru.SetType(*i)
	}
	return gru
}

// AddType adds i to the "type" field.
func (gru *GroupRelationUpdate) AddType(i int) *GroupRelationUpdate {
	gru.mutation.AddType(i)
	return gru
}

// SetDesc sets the "desc" field.
func (gru *GroupRelationUpdate) SetDesc(s string) *GroupRelationUpdate {
	gru.mutation.SetDesc(s)
	return gru
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (gru *GroupRelationUpdate) SetNillableDesc(s *string) *GroupRelationUpdate {
	if s != nil {
		gru.SetDesc(*s)
	}
	return gru
}

// SetGroup sets the "group" edge to the Group entity.
func (gru *GroupRelationUpdate) SetGroup(g *Group) *GroupRelationUpdate {
	return gru.SetGroupID(g.ID)
}

// SetUser sets the "user" edge to the User entity.
func (gru *GroupRelationUpdate) SetUser(u *User) *GroupRelationUpdate {
	return gru.SetUserID(u.ID)
}

// Mutation returns the GroupRelationMutation object of the builder.
func (gru *GroupRelationUpdate) Mutation() *GroupRelationMutation {
	return gru.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (gru *GroupRelationUpdate) ClearGroup() *GroupRelationUpdate {
	gru.mutation.ClearGroup()
	return gru
}

// ClearUser clears the "user" edge to the User entity.
func (gru *GroupRelationUpdate) ClearUser() *GroupRelationUpdate {
	gru.mutation.ClearUser()
	return gru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gru *GroupRelationUpdate) Save(ctx context.Context) (int, error) {
	gru.defaults()
	return withHooks(ctx, gru.sqlSave, gru.mutation, gru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gru *GroupRelationUpdate) SaveX(ctx context.Context) int {
	affected, err := gru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gru *GroupRelationUpdate) Exec(ctx context.Context) error {
	_, err := gru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gru *GroupRelationUpdate) ExecX(ctx context.Context) {
	if err := gru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gru *GroupRelationUpdate) defaults() {
	if _, ok := gru.mutation.UpdatedAt(); !ok {
		v := grouprelation.UpdateDefaultUpdatedAt()
		gru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gru *GroupRelationUpdate) check() error {
	if _, ok := gru.mutation.GroupID(); gru.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupRelation.group"`)
	}
	if _, ok := gru.mutation.UserID(); gru.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupRelation.user"`)
	}
	return nil
}

func (gru *GroupRelationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(grouprelation.Table, grouprelation.Columns, sqlgraph.NewFieldSpec(grouprelation.FieldID, field.TypeInt))
	if ps := gru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gru.mutation.UpdatedAt(); ok {
		_spec.SetField(grouprelation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gru.mutation.DeletedAt(); ok {
		_spec.SetField(grouprelation.FieldDeletedAt, field.TypeTime, value)
	}
	if gru.mutation.DeletedAtCleared() {
		_spec.ClearField(grouprelation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gru.mutation.GetType(); ok {
		_spec.SetField(grouprelation.FieldType, field.TypeInt, value)
	}
	if value, ok := gru.mutation.AddedType(); ok {
		_spec.AddField(grouprelation.FieldType, field.TypeInt, value)
	}
	if value, ok := gru.mutation.Desc(); ok {
		_spec.SetField(grouprelation.FieldDesc, field.TypeString, value)
	}
	if gru.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprelation.GroupTable,
			Columns: []string{grouprelation.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprelation.GroupTable,
			Columns: []string{grouprelation.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprelation.UserTable,
			Columns: []string{grouprelation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprelation.UserTable,
			Columns: []string{grouprelation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grouprelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gru.mutation.done = true
	return n, nil
}

// GroupRelationUpdateOne is the builder for updating a single GroupRelation entity.
type GroupRelationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupRelationMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gruo *GroupRelationUpdateOne) SetUpdatedAt(t time.Time) *GroupRelationUpdateOne {
	gruo.mutation.SetUpdatedAt(t)
	return gruo
}

// SetDeletedAt sets the "deleted_at" field.
func (gruo *GroupRelationUpdateOne) SetDeletedAt(t time.Time) *GroupRelationUpdateOne {
	gruo.mutation.SetDeletedAt(t)
	return gruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gruo *GroupRelationUpdateOne) SetNillableDeletedAt(t *time.Time) *GroupRelationUpdateOne {
	if t != nil {
		gruo.SetDeletedAt(*t)
	}
	return gruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gruo *GroupRelationUpdateOne) ClearDeletedAt() *GroupRelationUpdateOne {
	gruo.mutation.ClearDeletedAt()
	return gruo
}

// SetGroupID sets the "group_id" field.
func (gruo *GroupRelationUpdateOne) SetGroupID(i int) *GroupRelationUpdateOne {
	gruo.mutation.SetGroupID(i)
	return gruo
}

// SetUserID sets the "user_id" field.
func (gruo *GroupRelationUpdateOne) SetUserID(i int) *GroupRelationUpdateOne {
	gruo.mutation.SetUserID(i)
	return gruo
}

// SetType sets the "type" field.
func (gruo *GroupRelationUpdateOne) SetType(i int) *GroupRelationUpdateOne {
	gruo.mutation.ResetType()
	gruo.mutation.SetType(i)
	return gruo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (gruo *GroupRelationUpdateOne) SetNillableType(i *int) *GroupRelationUpdateOne {
	if i != nil {
		gruo.SetType(*i)
	}
	return gruo
}

// AddType adds i to the "type" field.
func (gruo *GroupRelationUpdateOne) AddType(i int) *GroupRelationUpdateOne {
	gruo.mutation.AddType(i)
	return gruo
}

// SetDesc sets the "desc" field.
func (gruo *GroupRelationUpdateOne) SetDesc(s string) *GroupRelationUpdateOne {
	gruo.mutation.SetDesc(s)
	return gruo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (gruo *GroupRelationUpdateOne) SetNillableDesc(s *string) *GroupRelationUpdateOne {
	if s != nil {
		gruo.SetDesc(*s)
	}
	return gruo
}

// SetGroup sets the "group" edge to the Group entity.
func (gruo *GroupRelationUpdateOne) SetGroup(g *Group) *GroupRelationUpdateOne {
	return gruo.SetGroupID(g.ID)
}

// SetUser sets the "user" edge to the User entity.
func (gruo *GroupRelationUpdateOne) SetUser(u *User) *GroupRelationUpdateOne {
	return gruo.SetUserID(u.ID)
}

// Mutation returns the GroupRelationMutation object of the builder.
func (gruo *GroupRelationUpdateOne) Mutation() *GroupRelationMutation {
	return gruo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (gruo *GroupRelationUpdateOne) ClearGroup() *GroupRelationUpdateOne {
	gruo.mutation.ClearGroup()
	return gruo
}

// ClearUser clears the "user" edge to the User entity.
func (gruo *GroupRelationUpdateOne) ClearUser() *GroupRelationUpdateOne {
	gruo.mutation.ClearUser()
	return gruo
}

// Where appends a list predicates to the GroupRelationUpdate builder.
func (gruo *GroupRelationUpdateOne) Where(ps ...predicate.GroupRelation) *GroupRelationUpdateOne {
	gruo.mutation.Where(ps...)
	return gruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gruo *GroupRelationUpdateOne) Select(field string, fields ...string) *GroupRelationUpdateOne {
	gruo.fields = append([]string{field}, fields...)
	return gruo
}

// Save executes the query and returns the updated GroupRelation entity.
func (gruo *GroupRelationUpdateOne) Save(ctx context.Context) (*GroupRelation, error) {
	gruo.defaults()
	return withHooks(ctx, gruo.sqlSave, gruo.mutation, gruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gruo *GroupRelationUpdateOne) SaveX(ctx context.Context) *GroupRelation {
	node, err := gruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gruo *GroupRelationUpdateOne) Exec(ctx context.Context) error {
	_, err := gruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gruo *GroupRelationUpdateOne) ExecX(ctx context.Context) {
	if err := gruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gruo *GroupRelationUpdateOne) defaults() {
	if _, ok := gruo.mutation.UpdatedAt(); !ok {
		v := grouprelation.UpdateDefaultUpdatedAt()
		gruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gruo *GroupRelationUpdateOne) check() error {
	if _, ok := gruo.mutation.GroupID(); gruo.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupRelation.group"`)
	}
	if _, ok := gruo.mutation.UserID(); gruo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GroupRelation.user"`)
	}
	return nil
}

func (gruo *GroupRelationUpdateOne) sqlSave(ctx context.Context) (_node *GroupRelation, err error) {
	if err := gruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(grouprelation.Table, grouprelation.Columns, sqlgraph.NewFieldSpec(grouprelation.FieldID, field.TypeInt))
	id, ok := gruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GroupRelation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, grouprelation.FieldID)
		for _, f := range fields {
			if !grouprelation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != grouprelation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gruo.mutation.UpdatedAt(); ok {
		_spec.SetField(grouprelation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gruo.mutation.DeletedAt(); ok {
		_spec.SetField(grouprelation.FieldDeletedAt, field.TypeTime, value)
	}
	if gruo.mutation.DeletedAtCleared() {
		_spec.ClearField(grouprelation.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gruo.mutation.GetType(); ok {
		_spec.SetField(grouprelation.FieldType, field.TypeInt, value)
	}
	if value, ok := gruo.mutation.AddedType(); ok {
		_spec.AddField(grouprelation.FieldType, field.TypeInt, value)
	}
	if value, ok := gruo.mutation.Desc(); ok {
		_spec.SetField(grouprelation.FieldDesc, field.TypeString, value)
	}
	if gruo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprelation.GroupTable,
			Columns: []string{grouprelation.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprelation.GroupTable,
			Columns: []string{grouprelation.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprelation.UserTable,
			Columns: []string{grouprelation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   grouprelation.UserTable,
			Columns: []string{grouprelation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GroupRelation{config: gruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{grouprelation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gruo.mutation.done = true
	return _node, nil
}
