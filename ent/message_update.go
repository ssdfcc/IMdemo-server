// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-zero-chat/ent/message"
	"go-zero-chat/ent/predicate"
	"go-zero-chat/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks    []Hook
	mutation *MessageMutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MessageUpdate) SetUpdatedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetDeletedAt sets the "deleted_at" field.
func (mu *MessageUpdate) SetDeletedAt(t time.Time) *MessageUpdate {
	mu.mutation.SetDeletedAt(t)
	return mu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableDeletedAt(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetDeletedAt(*t)
	}
	return mu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (mu *MessageUpdate) ClearDeletedAt() *MessageUpdate {
	mu.mutation.ClearDeletedAt()
	return mu
}

// SetType sets the "type" field.
func (mu *MessageUpdate) SetType(i int) *MessageUpdate {
	mu.mutation.ResetType()
	mu.mutation.SetType(i)
	return mu
}

// AddType adds i to the "type" field.
func (mu *MessageUpdate) AddType(i int) *MessageUpdate {
	mu.mutation.AddType(i)
	return mu
}

// SetMedia sets the "media" field.
func (mu *MessageUpdate) SetMedia(i int) *MessageUpdate {
	mu.mutation.ResetMedia()
	mu.mutation.SetMedia(i)
	return mu
}

// AddMedia adds i to the "media" field.
func (mu *MessageUpdate) AddMedia(i int) *MessageUpdate {
	mu.mutation.AddMedia(i)
	return mu
}

// SetContent sets the "content" field.
func (mu *MessageUpdate) SetContent(s string) *MessageUpdate {
	mu.mutation.SetContent(s)
	return mu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableContent(s *string) *MessageUpdate {
	if s != nil {
		mu.SetContent(*s)
	}
	return mu
}

// SetPic sets the "pic" field.
func (mu *MessageUpdate) SetPic(s string) *MessageUpdate {
	mu.mutation.SetPic(s)
	return mu
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (mu *MessageUpdate) SetNillablePic(s *string) *MessageUpdate {
	if s != nil {
		mu.SetPic(*s)
	}
	return mu
}

// SetURL sets the "url" field.
func (mu *MessageUpdate) SetURL(s string) *MessageUpdate {
	mu.mutation.SetURL(s)
	return mu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableURL(s *string) *MessageUpdate {
	if s != nil {
		mu.SetURL(*s)
	}
	return mu
}

// SetDesc sets the "desc" field.
func (mu *MessageUpdate) SetDesc(s string) *MessageUpdate {
	mu.mutation.SetDesc(s)
	return mu
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableDesc(s *string) *MessageUpdate {
	if s != nil {
		mu.SetDesc(*s)
	}
	return mu
}

// SetAmount sets the "amount" field.
func (mu *MessageUpdate) SetAmount(i int) *MessageUpdate {
	mu.mutation.ResetAmount()
	mu.mutation.SetAmount(i)
	return mu
}

// AddAmount adds i to the "amount" field.
func (mu *MessageUpdate) AddAmount(i int) *MessageUpdate {
	mu.mutation.AddAmount(i)
	return mu
}

// SetFormID sets the "form_id" field.
func (mu *MessageUpdate) SetFormID(i int) *MessageUpdate {
	mu.mutation.SetFormID(i)
	return mu
}

// SetTargetID sets the "target_id" field.
func (mu *MessageUpdate) SetTargetID(i int) *MessageUpdate {
	mu.mutation.SetTargetID(i)
	return mu
}

// SetSenderID sets the "sender" edge to the User entity by ID.
func (mu *MessageUpdate) SetSenderID(id int) *MessageUpdate {
	mu.mutation.SetSenderID(id)
	return mu
}

// SetSender sets the "sender" edge to the User entity.
func (mu *MessageUpdate) SetSender(u *User) *MessageUpdate {
	return mu.SetSenderID(u.ID)
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (mu *MessageUpdate) SetRecipientID(id int) *MessageUpdate {
	mu.mutation.SetRecipientID(id)
	return mu
}

// SetRecipient sets the "recipient" edge to the User entity.
func (mu *MessageUpdate) SetRecipient(u *User) *MessageUpdate {
	return mu.SetRecipientID(u.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (mu *MessageUpdate) ClearSender() *MessageUpdate {
	mu.mutation.ClearSender()
	return mu
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (mu *MessageUpdate) ClearRecipient() *MessageUpdate {
	mu.mutation.ClearRecipient()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MessageUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MessageUpdate) check() error {
	if _, ok := mu.mutation.SenderID(); mu.mutation.SenderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.sender"`)
	}
	if _, ok := mu.mutation.RecipientID(); mu.mutation.RecipientCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.recipient"`)
	}
	return nil
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.DeletedAt(); ok {
		_spec.SetField(message.FieldDeletedAt, field.TypeTime, value)
	}
	if mu.mutation.DeletedAtCleared() {
		_spec.ClearField(message.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedType(); ok {
		_spec.AddField(message.FieldType, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Media(); ok {
		_spec.SetField(message.FieldMedia, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedMedia(); ok {
		_spec.AddField(message.FieldMedia, field.TypeInt, value)
	}
	if value, ok := mu.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if value, ok := mu.mutation.Pic(); ok {
		_spec.SetField(message.FieldPic, field.TypeString, value)
	}
	if value, ok := mu.mutation.URL(); ok {
		_spec.SetField(message.FieldURL, field.TypeString, value)
	}
	if value, ok := mu.mutation.Desc(); ok {
		_spec.SetField(message.FieldDesc, field.TypeString, value)
	}
	if value, ok := mu.mutation.Amount(); ok {
		_spec.SetField(message.FieldAmount, field.TypeInt, value)
	}
	if value, ok := mu.mutation.AddedAmount(); ok {
		_spec.AddField(message.FieldAmount, field.TypeInt, value)
	}
	if mu.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RecipientTable,
			Columns: []string{message.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RecipientTable,
			Columns: []string{message.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MessageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MessageUpdateOne) SetUpdatedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetDeletedAt sets the "deleted_at" field.
func (muo *MessageUpdateOne) SetDeletedAt(t time.Time) *MessageUpdateOne {
	muo.mutation.SetDeletedAt(t)
	return muo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableDeletedAt(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetDeletedAt(*t)
	}
	return muo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (muo *MessageUpdateOne) ClearDeletedAt() *MessageUpdateOne {
	muo.mutation.ClearDeletedAt()
	return muo
}

// SetType sets the "type" field.
func (muo *MessageUpdateOne) SetType(i int) *MessageUpdateOne {
	muo.mutation.ResetType()
	muo.mutation.SetType(i)
	return muo
}

// AddType adds i to the "type" field.
func (muo *MessageUpdateOne) AddType(i int) *MessageUpdateOne {
	muo.mutation.AddType(i)
	return muo
}

// SetMedia sets the "media" field.
func (muo *MessageUpdateOne) SetMedia(i int) *MessageUpdateOne {
	muo.mutation.ResetMedia()
	muo.mutation.SetMedia(i)
	return muo
}

// AddMedia adds i to the "media" field.
func (muo *MessageUpdateOne) AddMedia(i int) *MessageUpdateOne {
	muo.mutation.AddMedia(i)
	return muo
}

// SetContent sets the "content" field.
func (muo *MessageUpdateOne) SetContent(s string) *MessageUpdateOne {
	muo.mutation.SetContent(s)
	return muo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableContent(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetContent(*s)
	}
	return muo
}

// SetPic sets the "pic" field.
func (muo *MessageUpdateOne) SetPic(s string) *MessageUpdateOne {
	muo.mutation.SetPic(s)
	return muo
}

// SetNillablePic sets the "pic" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillablePic(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetPic(*s)
	}
	return muo
}

// SetURL sets the "url" field.
func (muo *MessageUpdateOne) SetURL(s string) *MessageUpdateOne {
	muo.mutation.SetURL(s)
	return muo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableURL(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetURL(*s)
	}
	return muo
}

// SetDesc sets the "desc" field.
func (muo *MessageUpdateOne) SetDesc(s string) *MessageUpdateOne {
	muo.mutation.SetDesc(s)
	return muo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableDesc(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetDesc(*s)
	}
	return muo
}

// SetAmount sets the "amount" field.
func (muo *MessageUpdateOne) SetAmount(i int) *MessageUpdateOne {
	muo.mutation.ResetAmount()
	muo.mutation.SetAmount(i)
	return muo
}

// AddAmount adds i to the "amount" field.
func (muo *MessageUpdateOne) AddAmount(i int) *MessageUpdateOne {
	muo.mutation.AddAmount(i)
	return muo
}

// SetFormID sets the "form_id" field.
func (muo *MessageUpdateOne) SetFormID(i int) *MessageUpdateOne {
	muo.mutation.SetFormID(i)
	return muo
}

// SetTargetID sets the "target_id" field.
func (muo *MessageUpdateOne) SetTargetID(i int) *MessageUpdateOne {
	muo.mutation.SetTargetID(i)
	return muo
}

// SetSenderID sets the "sender" edge to the User entity by ID.
func (muo *MessageUpdateOne) SetSenderID(id int) *MessageUpdateOne {
	muo.mutation.SetSenderID(id)
	return muo
}

// SetSender sets the "sender" edge to the User entity.
func (muo *MessageUpdateOne) SetSender(u *User) *MessageUpdateOne {
	return muo.SetSenderID(u.ID)
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (muo *MessageUpdateOne) SetRecipientID(id int) *MessageUpdateOne {
	muo.mutation.SetRecipientID(id)
	return muo
}

// SetRecipient sets the "recipient" edge to the User entity.
func (muo *MessageUpdateOne) SetRecipient(u *User) *MessageUpdateOne {
	return muo.SetRecipientID(u.ID)
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// ClearSender clears the "sender" edge to the User entity.
func (muo *MessageUpdateOne) ClearSender() *MessageUpdateOne {
	muo.mutation.ClearSender()
	return muo
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (muo *MessageUpdateOne) ClearRecipient() *MessageUpdateOne {
	muo.mutation.ClearRecipient()
	return muo
}

// Where appends a list predicates to the MessageUpdate builder.
func (muo *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MessageUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := message.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MessageUpdateOne) check() error {
	if _, ok := muo.mutation.SenderID(); muo.mutation.SenderCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.sender"`)
	}
	if _, ok := muo.mutation.RecipientID(); muo.mutation.RecipientCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Message.recipient"`)
	}
	return nil
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(message.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.DeletedAt(); ok {
		_spec.SetField(message.FieldDeletedAt, field.TypeTime, value)
	}
	if muo.mutation.DeletedAtCleared() {
		_spec.ClearField(message.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.GetType(); ok {
		_spec.SetField(message.FieldType, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedType(); ok {
		_spec.AddField(message.FieldType, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Media(); ok {
		_spec.SetField(message.FieldMedia, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedMedia(); ok {
		_spec.AddField(message.FieldMedia, field.TypeInt, value)
	}
	if value, ok := muo.mutation.Content(); ok {
		_spec.SetField(message.FieldContent, field.TypeString, value)
	}
	if value, ok := muo.mutation.Pic(); ok {
		_spec.SetField(message.FieldPic, field.TypeString, value)
	}
	if value, ok := muo.mutation.URL(); ok {
		_spec.SetField(message.FieldURL, field.TypeString, value)
	}
	if value, ok := muo.mutation.Desc(); ok {
		_spec.SetField(message.FieldDesc, field.TypeString, value)
	}
	if value, ok := muo.mutation.Amount(); ok {
		_spec.SetField(message.FieldAmount, field.TypeInt, value)
	}
	if value, ok := muo.mutation.AddedAmount(); ok {
		_spec.AddField(message.FieldAmount, field.TypeInt, value)
	}
	if muo.mutation.SenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.SenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.SenderTable,
			Columns: []string{message.SenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RecipientTable,
			Columns: []string{message.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   message.RecipientTable,
			Columns: []string{message.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
