// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-zero-chat/ent/contact"
	"go-zero-chat/ent/file"
	"go-zero-chat/ent/group"
	"go-zero-chat/ent/groupmsg"
	"go-zero-chat/ent/grouprelation"
	"go-zero-chat/ent/message"
	"go-zero-chat/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (uc *UserCreate) SetCreatedAt(t time.Time) *UserCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableCreatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UserCreate) SetUpdatedAt(t time.Time) *UserCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableUpdatedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetDeletedAt sets the "deleted_at" field.
func (uc *UserCreate) SetDeletedAt(t time.Time) *UserCreate {
	uc.mutation.SetDeletedAt(t)
	return uc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uc *UserCreate) SetNillableDeletedAt(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetAvatar sets the "avatar" field.
func (uc *UserCreate) SetAvatar(s string) *UserCreate {
	uc.mutation.SetAvatar(s)
	return uc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uc *UserCreate) SetNillableAvatar(s *string) *UserCreate {
	if s != nil {
		uc.SetAvatar(*s)
	}
	return uc
}

// SetPhone sets the "phone" field.
func (uc *UserCreate) SetPhone(s string) *UserCreate {
	uc.mutation.SetPhone(s)
	return uc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhone(s *string) *UserCreate {
	if s != nil {
		uc.SetPhone(*s)
	}
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uc *UserCreate) SetNillableEmail(s *string) *UserCreate {
	if s != nil {
		uc.SetEmail(*s)
	}
	return uc
}

// SetClientIP sets the "client_ip" field.
func (uc *UserCreate) SetClientIP(s string) *UserCreate {
	uc.mutation.SetClientIP(s)
	return uc
}

// SetNillableClientIP sets the "client_ip" field if the given value is not nil.
func (uc *UserCreate) SetNillableClientIP(s *string) *UserCreate {
	if s != nil {
		uc.SetClientIP(*s)
	}
	return uc
}

// SetClientPort sets the "client_port" field.
func (uc *UserCreate) SetClientPort(s string) *UserCreate {
	uc.mutation.SetClientPort(s)
	return uc
}

// SetNillableClientPort sets the "client_port" field if the given value is not nil.
func (uc *UserCreate) SetNillableClientPort(s *string) *UserCreate {
	if s != nil {
		uc.SetClientPort(*s)
	}
	return uc
}

// SetSalt sets the "salt" field.
func (uc *UserCreate) SetSalt(s string) *UserCreate {
	uc.mutation.SetSalt(s)
	return uc
}

// SetNillableSalt sets the "salt" field if the given value is not nil.
func (uc *UserCreate) SetNillableSalt(s *string) *UserCreate {
	if s != nil {
		uc.SetSalt(*s)
	}
	return uc
}

// SetLoginTime sets the "login_time" field.
func (uc *UserCreate) SetLoginTime(t time.Time) *UserCreate {
	uc.mutation.SetLoginTime(t)
	return uc
}

// SetNillableLoginTime sets the "login_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableLoginTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLoginTime(*t)
	}
	return uc
}

// SetHeartbeatTime sets the "heartbeat_time" field.
func (uc *UserCreate) SetHeartbeatTime(t time.Time) *UserCreate {
	uc.mutation.SetHeartbeatTime(t)
	return uc
}

// SetNillableHeartbeatTime sets the "heartbeat_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableHeartbeatTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetHeartbeatTime(*t)
	}
	return uc
}

// SetLogoutTime sets the "logout_time" field.
func (uc *UserCreate) SetLogoutTime(t time.Time) *UserCreate {
	uc.mutation.SetLogoutTime(t)
	return uc
}

// SetNillableLogoutTime sets the "logout_time" field if the given value is not nil.
func (uc *UserCreate) SetNillableLogoutTime(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetLogoutTime(*t)
	}
	return uc
}

// SetIsLogout sets the "is_logout" field.
func (uc *UserCreate) SetIsLogout(b bool) *UserCreate {
	uc.mutation.SetIsLogout(b)
	return uc
}

// SetNillableIsLogout sets the "is_logout" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsLogout(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsLogout(*b)
	}
	return uc
}

// SetDeviceInfo sets the "device_info" field.
func (uc *UserCreate) SetDeviceInfo(s string) *UserCreate {
	uc.mutation.SetDeviceInfo(s)
	return uc
}

// SetNillableDeviceInfo sets the "device_info" field if the given value is not nil.
func (uc *UserCreate) SetNillableDeviceInfo(s *string) *UserCreate {
	if s != nil {
		uc.SetDeviceInfo(*s)
	}
	return uc
}

// AddFormMsgIDs adds the "form_msg" edge to the Message entity by IDs.
func (uc *UserCreate) AddFormMsgIDs(ids ...int) *UserCreate {
	uc.mutation.AddFormMsgIDs(ids...)
	return uc
}

// AddFormMsg adds the "form_msg" edges to the Message entity.
func (uc *UserCreate) AddFormMsg(m ...*Message) *UserCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddFormMsgIDs(ids...)
}

// AddTargetMsgIDs adds the "target_msg" edge to the Message entity by IDs.
func (uc *UserCreate) AddTargetMsgIDs(ids ...int) *UserCreate {
	uc.mutation.AddTargetMsgIDs(ids...)
	return uc
}

// AddTargetMsg adds the "target_msg" edges to the Message entity.
func (uc *UserCreate) AddTargetMsg(m ...*Message) *UserCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return uc.AddTargetMsgIDs(ids...)
}

// AddContactOwnerIDs adds the "contact_owner" edge to the Contact entity by IDs.
func (uc *UserCreate) AddContactOwnerIDs(ids ...int) *UserCreate {
	uc.mutation.AddContactOwnerIDs(ids...)
	return uc
}

// AddContactOwner adds the "contact_owner" edges to the Contact entity.
func (uc *UserCreate) AddContactOwner(c ...*Contact) *UserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddContactOwnerIDs(ids...)
}

// AddContactTargetIDs adds the "contact_target" edge to the Contact entity by IDs.
func (uc *UserCreate) AddContactTargetIDs(ids ...int) *UserCreate {
	uc.mutation.AddContactTargetIDs(ids...)
	return uc
}

// AddContactTarget adds the "contact_target" edges to the Contact entity.
func (uc *UserCreate) AddContactTarget(c ...*Contact) *UserCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uc.AddContactTargetIDs(ids...)
}

// AddGroupRelationUserIDs adds the "group_relation_user" edge to the GroupRelation entity by IDs.
func (uc *UserCreate) AddGroupRelationUserIDs(ids ...int) *UserCreate {
	uc.mutation.AddGroupRelationUserIDs(ids...)
	return uc
}

// AddGroupRelationUser adds the "group_relation_user" edges to the GroupRelation entity.
func (uc *UserCreate) AddGroupRelationUser(g ...*GroupRelation) *UserCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uc.AddGroupRelationUserIDs(ids...)
}

// AddGroupOwnerIDs adds the "group_owner" edge to the Group entity by IDs.
func (uc *UserCreate) AddGroupOwnerIDs(ids ...int) *UserCreate {
	uc.mutation.AddGroupOwnerIDs(ids...)
	return uc
}

// AddGroupOwner adds the "group_owner" edges to the Group entity.
func (uc *UserCreate) AddGroupOwner(g ...*Group) *UserCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uc.AddGroupOwnerIDs(ids...)
}

// AddGroupMsgIDs adds the "group_msg" edge to the GroupMsg entity by IDs.
func (uc *UserCreate) AddGroupMsgIDs(ids ...int) *UserCreate {
	uc.mutation.AddGroupMsgIDs(ids...)
	return uc
}

// AddGroupMsg adds the "group_msg" edges to the GroupMsg entity.
func (uc *UserCreate) AddGroupMsg(g ...*GroupMsg) *UserCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uc.AddGroupMsgIDs(ids...)
}

// AddFileIDs adds the "files" edge to the File entity by IDs.
func (uc *UserCreate) AddFileIDs(ids ...int) *UserCreate {
	uc.mutation.AddFileIDs(ids...)
	return uc
}

// AddFiles adds the "files" edges to the File entity.
func (uc *UserCreate) AddFiles(f ...*File) *UserCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return uc.AddFileIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := user.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := user.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.Avatar(); !ok {
		v := user.DefaultAvatar
		uc.mutation.SetAvatar(v)
	}
	if _, ok := uc.mutation.Phone(); !ok {
		v := user.DefaultPhone
		uc.mutation.SetPhone(v)
	}
	if _, ok := uc.mutation.Email(); !ok {
		v := user.DefaultEmail
		uc.mutation.SetEmail(v)
	}
	if _, ok := uc.mutation.ClientIP(); !ok {
		v := user.DefaultClientIP
		uc.mutation.SetClientIP(v)
	}
	if _, ok := uc.mutation.ClientPort(); !ok {
		v := user.DefaultClientPort
		uc.mutation.SetClientPort(v)
	}
	if _, ok := uc.mutation.Salt(); !ok {
		v := user.DefaultSalt
		uc.mutation.SetSalt(v)
	}
	if _, ok := uc.mutation.IsLogout(); !ok {
		v := user.DefaultIsLogout
		uc.mutation.SetIsLogout(v)
	}
	if _, ok := uc.mutation.DeviceInfo(); !ok {
		v := user.DefaultDeviceInfo
		uc.mutation.SetDeviceInfo(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "User.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "User.updated_at"`)}
	}
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if _, ok := uc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "User.avatar"`)}
	}
	if _, ok := uc.mutation.Phone(); !ok {
		return &ValidationError{Name: "phone", err: errors.New(`ent: missing required field "User.phone"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.ClientIP(); !ok {
		return &ValidationError{Name: "client_ip", err: errors.New(`ent: missing required field "User.client_ip"`)}
	}
	if _, ok := uc.mutation.ClientPort(); !ok {
		return &ValidationError{Name: "client_port", err: errors.New(`ent: missing required field "User.client_port"`)}
	}
	if _, ok := uc.mutation.Salt(); !ok {
		return &ValidationError{Name: "salt", err: errors.New(`ent: missing required field "User.salt"`)}
	}
	if _, ok := uc.mutation.IsLogout(); !ok {
		return &ValidationError{Name: "is_logout", err: errors.New(`ent: missing required field "User.is_logout"`)}
	}
	if _, ok := uc.mutation.DeviceInfo(); !ok {
		return &ValidationError{Name: "device_info", err: errors.New(`ent: missing required field "User.device_info"`)}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.Avatar(); ok {
		_spec.SetField(user.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := uc.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := uc.mutation.ClientIP(); ok {
		_spec.SetField(user.FieldClientIP, field.TypeString, value)
		_node.ClientIP = value
	}
	if value, ok := uc.mutation.ClientPort(); ok {
		_spec.SetField(user.FieldClientPort, field.TypeString, value)
		_node.ClientPort = value
	}
	if value, ok := uc.mutation.Salt(); ok {
		_spec.SetField(user.FieldSalt, field.TypeString, value)
		_node.Salt = value
	}
	if value, ok := uc.mutation.LoginTime(); ok {
		_spec.SetField(user.FieldLoginTime, field.TypeTime, value)
		_node.LoginTime = &value
	}
	if value, ok := uc.mutation.HeartbeatTime(); ok {
		_spec.SetField(user.FieldHeartbeatTime, field.TypeTime, value)
		_node.HeartbeatTime = &value
	}
	if value, ok := uc.mutation.LogoutTime(); ok {
		_spec.SetField(user.FieldLogoutTime, field.TypeTime, value)
		_node.LogoutTime = &value
	}
	if value, ok := uc.mutation.IsLogout(); ok {
		_spec.SetField(user.FieldIsLogout, field.TypeBool, value)
		_node.IsLogout = value
	}
	if value, ok := uc.mutation.DeviceInfo(); ok {
		_spec.SetField(user.FieldDeviceInfo, field.TypeString, value)
		_node.DeviceInfo = value
	}
	if nodes := uc.mutation.FormMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FormMsgTable,
			Columns: []string{user.FormMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.TargetMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TargetMsgTable,
			Columns: []string{user.TargetMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ContactOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactOwnerTable,
			Columns: []string{user.ContactOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.ContactTargetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ContactTargetTable,
			Columns: []string{user.ContactTargetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.GroupRelationUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupRelationUserTable,
			Columns: []string{user.GroupRelationUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(grouprelation.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.GroupOwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupOwnerTable,
			Columns: []string{user.GroupOwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.GroupMsgIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMsgTable,
			Columns: []string{user.GroupMsgColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmsg.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.FilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.FilesTable,
			Columns: []string{user.FilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(file.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
