// Code generated by ent, DO NOT EDIT.

package user

import (
	"go-zero-chat/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// ClientIP applies equality check predicate on the "client_ip" field. It's identical to ClientIPEQ.
func ClientIP(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldClientIP, v))
}

// ClientPort applies equality check predicate on the "client_port" field. It's identical to ClientPortEQ.
func ClientPort(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldClientPort, v))
}

// Salt applies equality check predicate on the "salt" field. It's identical to SaltEQ.
func Salt(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSalt, v))
}

// LoginTime applies equality check predicate on the "login_time" field. It's identical to LoginTimeEQ.
func LoginTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginTime, v))
}

// HeartbeatTime applies equality check predicate on the "heartbeat_time" field. It's identical to HeartbeatTimeEQ.
func HeartbeatTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHeartbeatTime, v))
}

// LogoutTime applies equality check predicate on the "logout_time" field. It's identical to LogoutTimeEQ.
func LogoutTime(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLogoutTime, v))
}

// IsLogout applies equality check predicate on the "is_logout" field. It's identical to IsLogoutEQ.
func IsLogout(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsLogout, v))
}

// DeviceInfo applies equality check predicate on the "device_info" field. It's identical to DeviceInfoEQ.
func DeviceInfo(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeviceInfo, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldDeletedAt))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldAvatar, v))
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPhone, v))
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPhone, v))
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPhone, vs...))
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPhone, vs...))
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPhone, v))
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPhone, v))
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPhone, v))
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPhone, v))
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPhone, v))
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPhone, v))
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPhone, v))
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPhone, v))
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPhone, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// ClientIPEQ applies the EQ predicate on the "client_ip" field.
func ClientIPEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldClientIP, v))
}

// ClientIPNEQ applies the NEQ predicate on the "client_ip" field.
func ClientIPNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldClientIP, v))
}

// ClientIPIn applies the In predicate on the "client_ip" field.
func ClientIPIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldClientIP, vs...))
}

// ClientIPNotIn applies the NotIn predicate on the "client_ip" field.
func ClientIPNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldClientIP, vs...))
}

// ClientIPGT applies the GT predicate on the "client_ip" field.
func ClientIPGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldClientIP, v))
}

// ClientIPGTE applies the GTE predicate on the "client_ip" field.
func ClientIPGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldClientIP, v))
}

// ClientIPLT applies the LT predicate on the "client_ip" field.
func ClientIPLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldClientIP, v))
}

// ClientIPLTE applies the LTE predicate on the "client_ip" field.
func ClientIPLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldClientIP, v))
}

// ClientIPContains applies the Contains predicate on the "client_ip" field.
func ClientIPContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldClientIP, v))
}

// ClientIPHasPrefix applies the HasPrefix predicate on the "client_ip" field.
func ClientIPHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldClientIP, v))
}

// ClientIPHasSuffix applies the HasSuffix predicate on the "client_ip" field.
func ClientIPHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldClientIP, v))
}

// ClientIPEqualFold applies the EqualFold predicate on the "client_ip" field.
func ClientIPEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldClientIP, v))
}

// ClientIPContainsFold applies the ContainsFold predicate on the "client_ip" field.
func ClientIPContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldClientIP, v))
}

// ClientPortEQ applies the EQ predicate on the "client_port" field.
func ClientPortEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldClientPort, v))
}

// ClientPortNEQ applies the NEQ predicate on the "client_port" field.
func ClientPortNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldClientPort, v))
}

// ClientPortIn applies the In predicate on the "client_port" field.
func ClientPortIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldClientPort, vs...))
}

// ClientPortNotIn applies the NotIn predicate on the "client_port" field.
func ClientPortNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldClientPort, vs...))
}

// ClientPortGT applies the GT predicate on the "client_port" field.
func ClientPortGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldClientPort, v))
}

// ClientPortGTE applies the GTE predicate on the "client_port" field.
func ClientPortGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldClientPort, v))
}

// ClientPortLT applies the LT predicate on the "client_port" field.
func ClientPortLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldClientPort, v))
}

// ClientPortLTE applies the LTE predicate on the "client_port" field.
func ClientPortLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldClientPort, v))
}

// ClientPortContains applies the Contains predicate on the "client_port" field.
func ClientPortContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldClientPort, v))
}

// ClientPortHasPrefix applies the HasPrefix predicate on the "client_port" field.
func ClientPortHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldClientPort, v))
}

// ClientPortHasSuffix applies the HasSuffix predicate on the "client_port" field.
func ClientPortHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldClientPort, v))
}

// ClientPortEqualFold applies the EqualFold predicate on the "client_port" field.
func ClientPortEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldClientPort, v))
}

// ClientPortContainsFold applies the ContainsFold predicate on the "client_port" field.
func ClientPortContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldClientPort, v))
}

// SaltEQ applies the EQ predicate on the "salt" field.
func SaltEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSalt, v))
}

// SaltNEQ applies the NEQ predicate on the "salt" field.
func SaltNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSalt, v))
}

// SaltIn applies the In predicate on the "salt" field.
func SaltIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSalt, vs...))
}

// SaltNotIn applies the NotIn predicate on the "salt" field.
func SaltNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSalt, vs...))
}

// SaltGT applies the GT predicate on the "salt" field.
func SaltGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSalt, v))
}

// SaltGTE applies the GTE predicate on the "salt" field.
func SaltGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSalt, v))
}

// SaltLT applies the LT predicate on the "salt" field.
func SaltLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSalt, v))
}

// SaltLTE applies the LTE predicate on the "salt" field.
func SaltLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSalt, v))
}

// SaltContains applies the Contains predicate on the "salt" field.
func SaltContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSalt, v))
}

// SaltHasPrefix applies the HasPrefix predicate on the "salt" field.
func SaltHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSalt, v))
}

// SaltHasSuffix applies the HasSuffix predicate on the "salt" field.
func SaltHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSalt, v))
}

// SaltEqualFold applies the EqualFold predicate on the "salt" field.
func SaltEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSalt, v))
}

// SaltContainsFold applies the ContainsFold predicate on the "salt" field.
func SaltContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSalt, v))
}

// LoginTimeEQ applies the EQ predicate on the "login_time" field.
func LoginTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLoginTime, v))
}

// LoginTimeNEQ applies the NEQ predicate on the "login_time" field.
func LoginTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLoginTime, v))
}

// LoginTimeIn applies the In predicate on the "login_time" field.
func LoginTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLoginTime, vs...))
}

// LoginTimeNotIn applies the NotIn predicate on the "login_time" field.
func LoginTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLoginTime, vs...))
}

// LoginTimeGT applies the GT predicate on the "login_time" field.
func LoginTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLoginTime, v))
}

// LoginTimeGTE applies the GTE predicate on the "login_time" field.
func LoginTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLoginTime, v))
}

// LoginTimeLT applies the LT predicate on the "login_time" field.
func LoginTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLoginTime, v))
}

// LoginTimeLTE applies the LTE predicate on the "login_time" field.
func LoginTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLoginTime, v))
}

// LoginTimeIsNil applies the IsNil predicate on the "login_time" field.
func LoginTimeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLoginTime))
}

// LoginTimeNotNil applies the NotNil predicate on the "login_time" field.
func LoginTimeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLoginTime))
}

// HeartbeatTimeEQ applies the EQ predicate on the "heartbeat_time" field.
func HeartbeatTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldHeartbeatTime, v))
}

// HeartbeatTimeNEQ applies the NEQ predicate on the "heartbeat_time" field.
func HeartbeatTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldHeartbeatTime, v))
}

// HeartbeatTimeIn applies the In predicate on the "heartbeat_time" field.
func HeartbeatTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldHeartbeatTime, vs...))
}

// HeartbeatTimeNotIn applies the NotIn predicate on the "heartbeat_time" field.
func HeartbeatTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldHeartbeatTime, vs...))
}

// HeartbeatTimeGT applies the GT predicate on the "heartbeat_time" field.
func HeartbeatTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldHeartbeatTime, v))
}

// HeartbeatTimeGTE applies the GTE predicate on the "heartbeat_time" field.
func HeartbeatTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldHeartbeatTime, v))
}

// HeartbeatTimeLT applies the LT predicate on the "heartbeat_time" field.
func HeartbeatTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldHeartbeatTime, v))
}

// HeartbeatTimeLTE applies the LTE predicate on the "heartbeat_time" field.
func HeartbeatTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldHeartbeatTime, v))
}

// HeartbeatTimeIsNil applies the IsNil predicate on the "heartbeat_time" field.
func HeartbeatTimeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldHeartbeatTime))
}

// HeartbeatTimeNotNil applies the NotNil predicate on the "heartbeat_time" field.
func HeartbeatTimeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldHeartbeatTime))
}

// LogoutTimeEQ applies the EQ predicate on the "logout_time" field.
func LogoutTimeEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldLogoutTime, v))
}

// LogoutTimeNEQ applies the NEQ predicate on the "logout_time" field.
func LogoutTimeNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldLogoutTime, v))
}

// LogoutTimeIn applies the In predicate on the "logout_time" field.
func LogoutTimeIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldLogoutTime, vs...))
}

// LogoutTimeNotIn applies the NotIn predicate on the "logout_time" field.
func LogoutTimeNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldLogoutTime, vs...))
}

// LogoutTimeGT applies the GT predicate on the "logout_time" field.
func LogoutTimeGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldLogoutTime, v))
}

// LogoutTimeGTE applies the GTE predicate on the "logout_time" field.
func LogoutTimeGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldLogoutTime, v))
}

// LogoutTimeLT applies the LT predicate on the "logout_time" field.
func LogoutTimeLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldLogoutTime, v))
}

// LogoutTimeLTE applies the LTE predicate on the "logout_time" field.
func LogoutTimeLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldLogoutTime, v))
}

// LogoutTimeIsNil applies the IsNil predicate on the "logout_time" field.
func LogoutTimeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldLogoutTime))
}

// LogoutTimeNotNil applies the NotNil predicate on the "logout_time" field.
func LogoutTimeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldLogoutTime))
}

// IsLogoutEQ applies the EQ predicate on the "is_logout" field.
func IsLogoutEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldIsLogout, v))
}

// IsLogoutNEQ applies the NEQ predicate on the "is_logout" field.
func IsLogoutNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldIsLogout, v))
}

// DeviceInfoEQ applies the EQ predicate on the "device_info" field.
func DeviceInfoEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldDeviceInfo, v))
}

// DeviceInfoNEQ applies the NEQ predicate on the "device_info" field.
func DeviceInfoNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldDeviceInfo, v))
}

// DeviceInfoIn applies the In predicate on the "device_info" field.
func DeviceInfoIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldDeviceInfo, vs...))
}

// DeviceInfoNotIn applies the NotIn predicate on the "device_info" field.
func DeviceInfoNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldDeviceInfo, vs...))
}

// DeviceInfoGT applies the GT predicate on the "device_info" field.
func DeviceInfoGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldDeviceInfo, v))
}

// DeviceInfoGTE applies the GTE predicate on the "device_info" field.
func DeviceInfoGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldDeviceInfo, v))
}

// DeviceInfoLT applies the LT predicate on the "device_info" field.
func DeviceInfoLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldDeviceInfo, v))
}

// DeviceInfoLTE applies the LTE predicate on the "device_info" field.
func DeviceInfoLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldDeviceInfo, v))
}

// DeviceInfoContains applies the Contains predicate on the "device_info" field.
func DeviceInfoContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldDeviceInfo, v))
}

// DeviceInfoHasPrefix applies the HasPrefix predicate on the "device_info" field.
func DeviceInfoHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldDeviceInfo, v))
}

// DeviceInfoHasSuffix applies the HasSuffix predicate on the "device_info" field.
func DeviceInfoHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldDeviceInfo, v))
}

// DeviceInfoEqualFold applies the EqualFold predicate on the "device_info" field.
func DeviceInfoEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldDeviceInfo, v))
}

// DeviceInfoContainsFold applies the ContainsFold predicate on the "device_info" field.
func DeviceInfoContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldDeviceInfo, v))
}

// HasFormMsg applies the HasEdge predicate on the "form_msg" edge.
func HasFormMsg() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FormMsgTable, FormMsgColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormMsgWith applies the HasEdge predicate on the "form_msg" edge with a given conditions (other predicates).
func HasFormMsgWith(preds ...predicate.Message) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFormMsgStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTargetMsg applies the HasEdge predicate on the "target_msg" edge.
func HasTargetMsg() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TargetMsgTable, TargetMsgColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTargetMsgWith applies the HasEdge predicate on the "target_msg" edge with a given conditions (other predicates).
func HasTargetMsgWith(preds ...predicate.Message) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newTargetMsgStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContactOwner applies the HasEdge predicate on the "contact_owner" edge.
func HasContactOwner() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContactOwnerTable, ContactOwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactOwnerWith applies the HasEdge predicate on the "contact_owner" edge with a given conditions (other predicates).
func HasContactOwnerWith(preds ...predicate.Contact) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newContactOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasContactTarget applies the HasEdge predicate on the "contact_target" edge.
func HasContactTarget() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ContactTargetTable, ContactTargetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasContactTargetWith applies the HasEdge predicate on the "contact_target" edge with a given conditions (other predicates).
func HasContactTargetWith(preds ...predicate.Contact) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newContactTargetStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroupRelationUser applies the HasEdge predicate on the "group_relation_user" edge.
func HasGroupRelationUser() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupRelationUserTable, GroupRelationUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupRelationUserWith applies the HasEdge predicate on the "group_relation_user" edge with a given conditions (other predicates).
func HasGroupRelationUserWith(preds ...predicate.GroupRelation) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGroupRelationUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroupOwner applies the HasEdge predicate on the "group_owner" edge.
func HasGroupOwner() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupOwnerTable, GroupOwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupOwnerWith applies the HasEdge predicate on the "group_owner" edge with a given conditions (other predicates).
func HasGroupOwnerWith(preds ...predicate.Group) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGroupOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroupMsg applies the HasEdge predicate on the "group_msg" edge.
func HasGroupMsg() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GroupMsgTable, GroupMsgColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupMsgWith applies the HasEdge predicate on the "group_msg" edge with a given conditions (other predicates).
func HasGroupMsgWith(preds ...predicate.GroupMsg) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newGroupMsgStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFiles applies the HasEdge predicate on the "files" edge.
func HasFiles() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FilesTable, FilesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFilesWith applies the HasEdge predicate on the "files" edge with a given conditions (other predicates).
func HasFilesWith(preds ...predicate.File) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := newFilesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
