// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-zero-chat/ent/contact"
	"go-zero-chat/ent/file"
	"go-zero-chat/ent/group"
	"go-zero-chat/ent/groupmsg"
	"go-zero-chat/ent/grouprelation"
	"go-zero-chat/ent/message"
	"go-zero-chat/ent/predicate"
	"go-zero-chat/ent/user"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeContact       = "Contact"
	TypeFile          = "File"
	TypeGroup         = "Group"
	TypeGroupMsg      = "GroupMsg"
	TypeGroupRelation = "GroupRelation"
	TypeMessage       = "Message"
	TypeUser          = "User"
)

// ContactMutation represents an operation that mutates the Contact nodes in the graph.
type ContactMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	created_at         *time.Time
	updated_at         *time.Time
	deleted_at         *time.Time
	_type              *int
	add_type           *int
	desc               *string
	clearedFields      map[string]struct{}
	owner_user         *int
	clearedowner_user  bool
	target_user        *int
	clearedtarget_user bool
	done               bool
	oldValue           func(context.Context) (*Contact, error)
	predicates         []predicate.Contact
}

var _ ent.Mutation = (*ContactMutation)(nil)

// contactOption allows management of the mutation configuration using functional options.
type contactOption func(*ContactMutation)

// newContactMutation creates new mutation for the Contact entity.
func newContactMutation(c config, op Op, opts ...contactOption) *ContactMutation {
	m := &ContactMutation{
		config:        c,
		op:            op,
		typ:           TypeContact,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContactID sets the ID field of the mutation.
func withContactID(id int) contactOption {
	return func(m *ContactMutation) {
		var (
			err   error
			once  sync.Once
			value *Contact
		)
		m.oldValue = func(ctx context.Context) (*Contact, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Contact.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContact sets the old Contact of the mutation.
func withContact(node *Contact) contactOption {
	return func(m *ContactMutation) {
		m.oldValue = func(context.Context) (*Contact, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContactMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContactMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContactMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ContactMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Contact.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ContactMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ContactMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ContactMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ContactMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ContactMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ContactMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *ContactMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *ContactMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *ContactMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[contact.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *ContactMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[contact.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *ContactMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, contact.FieldDeletedAt)
}

// SetOwnerID sets the "owner_id" field.
func (m *ContactMutation) SetOwnerID(i int) {
	m.owner_user = &i
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *ContactMutation) OwnerID() (r int, exists bool) {
	v := m.owner_user
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldOwnerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *ContactMutation) ResetOwnerID() {
	m.owner_user = nil
}

// SetTargetID sets the "target_id" field.
func (m *ContactMutation) SetTargetID(i int) {
	m.target_user = &i
}

// TargetID returns the value of the "target_id" field in the mutation.
func (m *ContactMutation) TargetID() (r int, exists bool) {
	v := m.target_user
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetID returns the old "target_id" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldTargetID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetID: %w", err)
	}
	return oldValue.TargetID, nil
}

// ResetTargetID resets all changes to the "target_id" field.
func (m *ContactMutation) ResetTargetID() {
	m.target_user = nil
}

// SetType sets the "type" field.
func (m *ContactMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *ContactMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *ContactMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *ContactMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *ContactMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetDesc sets the "desc" field.
func (m *ContactMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *ContactMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Contact entity.
// If the Contact object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContactMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *ContactMutation) ResetDesc() {
	m.desc = nil
}

// SetOwnerUserID sets the "owner_user" edge to the User entity by id.
func (m *ContactMutation) SetOwnerUserID(id int) {
	m.owner_user = &id
}

// ClearOwnerUser clears the "owner_user" edge to the User entity.
func (m *ContactMutation) ClearOwnerUser() {
	m.clearedowner_user = true
	m.clearedFields[contact.FieldOwnerID] = struct{}{}
}

// OwnerUserCleared reports if the "owner_user" edge to the User entity was cleared.
func (m *ContactMutation) OwnerUserCleared() bool {
	return m.clearedowner_user
}

// OwnerUserID returns the "owner_user" edge ID in the mutation.
func (m *ContactMutation) OwnerUserID() (id int, exists bool) {
	if m.owner_user != nil {
		return *m.owner_user, true
	}
	return
}

// OwnerUserIDs returns the "owner_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerUserID instead. It exists only for internal usage by the builders.
func (m *ContactMutation) OwnerUserIDs() (ids []int) {
	if id := m.owner_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwnerUser resets all changes to the "owner_user" edge.
func (m *ContactMutation) ResetOwnerUser() {
	m.owner_user = nil
	m.clearedowner_user = false
}

// SetTargetUserID sets the "target_user" edge to the User entity by id.
func (m *ContactMutation) SetTargetUserID(id int) {
	m.target_user = &id
}

// ClearTargetUser clears the "target_user" edge to the User entity.
func (m *ContactMutation) ClearTargetUser() {
	m.clearedtarget_user = true
	m.clearedFields[contact.FieldTargetID] = struct{}{}
}

// TargetUserCleared reports if the "target_user" edge to the User entity was cleared.
func (m *ContactMutation) TargetUserCleared() bool {
	return m.clearedtarget_user
}

// TargetUserID returns the "target_user" edge ID in the mutation.
func (m *ContactMutation) TargetUserID() (id int, exists bool) {
	if m.target_user != nil {
		return *m.target_user, true
	}
	return
}

// TargetUserIDs returns the "target_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TargetUserID instead. It exists only for internal usage by the builders.
func (m *ContactMutation) TargetUserIDs() (ids []int) {
	if id := m.target_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTargetUser resets all changes to the "target_user" edge.
func (m *ContactMutation) ResetTargetUser() {
	m.target_user = nil
	m.clearedtarget_user = false
}

// Where appends a list predicates to the ContactMutation builder.
func (m *ContactMutation) Where(ps ...predicate.Contact) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ContactMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ContactMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Contact, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ContactMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ContactMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Contact).
func (m *ContactMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContactMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, contact.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, contact.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, contact.FieldDeletedAt)
	}
	if m.owner_user != nil {
		fields = append(fields, contact.FieldOwnerID)
	}
	if m.target_user != nil {
		fields = append(fields, contact.FieldTargetID)
	}
	if m._type != nil {
		fields = append(fields, contact.FieldType)
	}
	if m.desc != nil {
		fields = append(fields, contact.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContactMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case contact.FieldCreatedAt:
		return m.CreatedAt()
	case contact.FieldUpdatedAt:
		return m.UpdatedAt()
	case contact.FieldDeletedAt:
		return m.DeletedAt()
	case contact.FieldOwnerID:
		return m.OwnerID()
	case contact.FieldTargetID:
		return m.TargetID()
	case contact.FieldType:
		return m.GetType()
	case contact.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContactMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case contact.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case contact.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case contact.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case contact.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case contact.FieldTargetID:
		return m.OldTargetID(ctx)
	case contact.FieldType:
		return m.OldType(ctx)
	case contact.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown Contact field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContactMutation) SetField(name string, value ent.Value) error {
	switch name {
	case contact.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case contact.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case contact.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case contact.FieldOwnerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case contact.FieldTargetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetID(v)
		return nil
	case contact.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case contact.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown Contact field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContactMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, contact.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContactMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case contact.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContactMutation) AddField(name string, value ent.Value) error {
	switch name {
	case contact.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown Contact numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContactMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(contact.FieldDeletedAt) {
		fields = append(fields, contact.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContactMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContactMutation) ClearField(name string) error {
	switch name {
	case contact.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Contact nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContactMutation) ResetField(name string) error {
	switch name {
	case contact.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case contact.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case contact.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case contact.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case contact.FieldTargetID:
		m.ResetTargetID()
		return nil
	case contact.FieldType:
		m.ResetType()
		return nil
	case contact.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown Contact field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContactMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner_user != nil {
		edges = append(edges, contact.EdgeOwnerUser)
	}
	if m.target_user != nil {
		edges = append(edges, contact.EdgeTargetUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContactMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case contact.EdgeOwnerUser:
		if id := m.owner_user; id != nil {
			return []ent.Value{*id}
		}
	case contact.EdgeTargetUser:
		if id := m.target_user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContactMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContactMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContactMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedowner_user {
		edges = append(edges, contact.EdgeOwnerUser)
	}
	if m.clearedtarget_user {
		edges = append(edges, contact.EdgeTargetUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContactMutation) EdgeCleared(name string) bool {
	switch name {
	case contact.EdgeOwnerUser:
		return m.clearedowner_user
	case contact.EdgeTargetUser:
		return m.clearedtarget_user
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContactMutation) ClearEdge(name string) error {
	switch name {
	case contact.EdgeOwnerUser:
		m.ClearOwnerUser()
		return nil
	case contact.EdgeTargetUser:
		m.ClearTargetUser()
		return nil
	}
	return fmt.Errorf("unknown Contact unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContactMutation) ResetEdge(name string) error {
	switch name {
	case contact.EdgeOwnerUser:
		m.ResetOwnerUser()
		return nil
	case contact.EdgeTargetUser:
		m.ResetTargetUser()
		return nil
	}
	return fmt.Errorf("unknown Contact edge %s", name)
}

// FileMutation represents an operation that mutates the File nodes in the graph.
type FileMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	hash          *string
	name          *string
	ext           *string
	size          *int64
	addsize       *int64
	_path         *string
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*File, error)
	predicates    []predicate.File
}

var _ ent.Mutation = (*FileMutation)(nil)

// fileOption allows management of the mutation configuration using functional options.
type fileOption func(*FileMutation)

// newFileMutation creates new mutation for the File entity.
func newFileMutation(c config, op Op, opts ...fileOption) *FileMutation {
	m := &FileMutation{
		config:        c,
		op:            op,
		typ:           TypeFile,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFileID sets the ID field of the mutation.
func withFileID(id int) fileOption {
	return func(m *FileMutation) {
		var (
			err   error
			once  sync.Once
			value *File
		)
		m.oldValue = func(ctx context.Context) (*File, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().File.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFile sets the old File of the mutation.
func withFile(node *File) fileOption {
	return func(m *FileMutation) {
		m.oldValue = func(context.Context) (*File, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FileMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().File.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *FileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *FileMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *FileMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *FileMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[file.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *FileMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[file.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *FileMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, file.FieldDeletedAt)
}

// SetHash sets the "hash" field.
func (m *FileMutation) SetHash(s string) {
	m.hash = &s
}

// Hash returns the value of the "hash" field in the mutation.
func (m *FileMutation) Hash() (r string, exists bool) {
	v := m.hash
	if v == nil {
		return
	}
	return *v, true
}

// OldHash returns the old "hash" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHash: %w", err)
	}
	return oldValue.Hash, nil
}

// ResetHash resets all changes to the "hash" field.
func (m *FileMutation) ResetHash() {
	m.hash = nil
}

// SetName sets the "name" field.
func (m *FileMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FileMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FileMutation) ResetName() {
	m.name = nil
}

// SetExt sets the "ext" field.
func (m *FileMutation) SetExt(s string) {
	m.ext = &s
}

// Ext returns the value of the "ext" field in the mutation.
func (m *FileMutation) Ext() (r string, exists bool) {
	v := m.ext
	if v == nil {
		return
	}
	return *v, true
}

// OldExt returns the old "ext" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldExt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExt: %w", err)
	}
	return oldValue.Ext, nil
}

// ResetExt resets all changes to the "ext" field.
func (m *FileMutation) ResetExt() {
	m.ext = nil
}

// SetSize sets the "size" field.
func (m *FileMutation) SetSize(i int64) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *FileMutation) Size() (r int64, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldSize(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *FileMutation) AddSize(i int64) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *FileMutation) AddedSize() (r int64, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *FileMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetPath sets the "path" field.
func (m *FileMutation) SetPath(s string) {
	m._path = &s
}

// Path returns the value of the "path" field in the mutation.
func (m *FileMutation) Path() (r string, exists bool) {
	v := m._path
	if v == nil {
		return
	}
	return *v, true
}

// OldPath returns the old "path" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPath: %w", err)
	}
	return oldValue.Path, nil
}

// ResetPath resets all changes to the "path" field.
func (m *FileMutation) ResetPath() {
	m._path = nil
}

// SetUserID sets the "user_id" field.
func (m *FileMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *FileMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the File entity.
// If the File object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FileMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *FileMutation) ResetUserID() {
	m.user = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *FileMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[file.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *FileMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *FileMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *FileMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the FileMutation builder.
func (m *FileMutation) Where(ps ...predicate.File) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FileMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FileMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.File, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FileMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FileMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (File).
func (m *FileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FileMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, file.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, file.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, file.FieldDeletedAt)
	}
	if m.hash != nil {
		fields = append(fields, file.FieldHash)
	}
	if m.name != nil {
		fields = append(fields, file.FieldName)
	}
	if m.ext != nil {
		fields = append(fields, file.FieldExt)
	}
	if m.size != nil {
		fields = append(fields, file.FieldSize)
	}
	if m._path != nil {
		fields = append(fields, file.FieldPath)
	}
	if m.user != nil {
		fields = append(fields, file.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case file.FieldCreatedAt:
		return m.CreatedAt()
	case file.FieldUpdatedAt:
		return m.UpdatedAt()
	case file.FieldDeletedAt:
		return m.DeletedAt()
	case file.FieldHash:
		return m.Hash()
	case file.FieldName:
		return m.Name()
	case file.FieldExt:
		return m.Ext()
	case file.FieldSize:
		return m.Size()
	case file.FieldPath:
		return m.Path()
	case file.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FileMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case file.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case file.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case file.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case file.FieldHash:
		return m.OldHash(ctx)
	case file.FieldName:
		return m.OldName(ctx)
	case file.FieldExt:
		return m.OldExt(ctx)
	case file.FieldSize:
		return m.OldSize(ctx)
	case file.FieldPath:
		return m.OldPath(ctx)
	case file.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown File field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case file.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case file.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case file.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case file.FieldHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHash(v)
		return nil
	case file.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case file.FieldExt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExt(v)
		return nil
	case file.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case file.FieldPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPath(v)
		return nil
	case file.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FileMutation) AddedFields() []string {
	var fields []string
	if m.addsize != nil {
		fields = append(fields, file.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FileMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case file.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FileMutation) AddField(name string, value ent.Value) error {
	switch name {
	case file.FieldSize:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown File numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(file.FieldDeletedAt) {
		fields = append(fields, file.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FileMutation) ClearField(name string) error {
	switch name {
	case file.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown File nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FileMutation) ResetField(name string) error {
	switch name {
	case file.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case file.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case file.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case file.FieldHash:
		m.ResetHash()
		return nil
	case file.FieldName:
		m.ResetName()
		return nil
	case file.FieldExt:
		m.ResetExt()
		return nil
	case file.FieldSize:
		m.ResetSize()
		return nil
	case file.FieldPath:
		m.ResetPath()
		return nil
	case file.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown File field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FileMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, file.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case file.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FileMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, file.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FileMutation) EdgeCleared(name string) bool {
	switch name {
	case file.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FileMutation) ClearEdge(name string) error {
	switch name {
	case file.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown File unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FileMutation) ResetEdge(name string) error {
	switch name {
	case file.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown File edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                          Op
	typ                         string
	id                          *int
	created_at                  *time.Time
	updated_at                  *time.Time
	deleted_at                  *time.Time
	name                        *string
	img                         *string
	desc                        *string
	clearedFields               map[string]struct{}
	owner_user                  *int
	clearedowner_user           bool
	group_relation_group        map[int]struct{}
	removedgroup_relation_group map[int]struct{}
	clearedgroup_relation_group bool
	target_msg                  map[int]struct{}
	removedtarget_msg           map[int]struct{}
	clearedtarget_msg           bool
	done                        bool
	oldValue                    func(context.Context) (*Group, error)
	predicates                  []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id int) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GroupMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GroupMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *GroupMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[group.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *GroupMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[group.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GroupMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, group.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetUserID sets the "user_id" field.
func (m *GroupMutation) SetUserID(i int) {
	m.owner_user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GroupMutation) UserID() (r int, exists bool) {
	v := m.owner_user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GroupMutation) ResetUserID() {
	m.owner_user = nil
}

// SetImg sets the "img" field.
func (m *GroupMutation) SetImg(s string) {
	m.img = &s
}

// Img returns the value of the "img" field in the mutation.
func (m *GroupMutation) Img() (r string, exists bool) {
	v := m.img
	if v == nil {
		return
	}
	return *v, true
}

// OldImg returns the old "img" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldImg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImg: %w", err)
	}
	return oldValue.Img, nil
}

// ResetImg resets all changes to the "img" field.
func (m *GroupMutation) ResetImg() {
	m.img = nil
}

// SetDesc sets the "desc" field.
func (m *GroupMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *GroupMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *GroupMutation) ResetDesc() {
	m.desc = nil
}

// SetOwnerUserID sets the "owner_user" edge to the User entity by id.
func (m *GroupMutation) SetOwnerUserID(id int) {
	m.owner_user = &id
}

// ClearOwnerUser clears the "owner_user" edge to the User entity.
func (m *GroupMutation) ClearOwnerUser() {
	m.clearedowner_user = true
	m.clearedFields[group.FieldUserID] = struct{}{}
}

// OwnerUserCleared reports if the "owner_user" edge to the User entity was cleared.
func (m *GroupMutation) OwnerUserCleared() bool {
	return m.clearedowner_user
}

// OwnerUserID returns the "owner_user" edge ID in the mutation.
func (m *GroupMutation) OwnerUserID() (id int, exists bool) {
	if m.owner_user != nil {
		return *m.owner_user, true
	}
	return
}

// OwnerUserIDs returns the "owner_user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerUserID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) OwnerUserIDs() (ids []int) {
	if id := m.owner_user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwnerUser resets all changes to the "owner_user" edge.
func (m *GroupMutation) ResetOwnerUser() {
	m.owner_user = nil
	m.clearedowner_user = false
}

// AddGroupRelationGroupIDs adds the "group_relation_group" edge to the GroupRelation entity by ids.
func (m *GroupMutation) AddGroupRelationGroupIDs(ids ...int) {
	if m.group_relation_group == nil {
		m.group_relation_group = make(map[int]struct{})
	}
	for i := range ids {
		m.group_relation_group[ids[i]] = struct{}{}
	}
}

// ClearGroupRelationGroup clears the "group_relation_group" edge to the GroupRelation entity.
func (m *GroupMutation) ClearGroupRelationGroup() {
	m.clearedgroup_relation_group = true
}

// GroupRelationGroupCleared reports if the "group_relation_group" edge to the GroupRelation entity was cleared.
func (m *GroupMutation) GroupRelationGroupCleared() bool {
	return m.clearedgroup_relation_group
}

// RemoveGroupRelationGroupIDs removes the "group_relation_group" edge to the GroupRelation entity by IDs.
func (m *GroupMutation) RemoveGroupRelationGroupIDs(ids ...int) {
	if m.removedgroup_relation_group == nil {
		m.removedgroup_relation_group = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.group_relation_group, ids[i])
		m.removedgroup_relation_group[ids[i]] = struct{}{}
	}
}

// RemovedGroupRelationGroup returns the removed IDs of the "group_relation_group" edge to the GroupRelation entity.
func (m *GroupMutation) RemovedGroupRelationGroupIDs() (ids []int) {
	for id := range m.removedgroup_relation_group {
		ids = append(ids, id)
	}
	return
}

// GroupRelationGroupIDs returns the "group_relation_group" edge IDs in the mutation.
func (m *GroupMutation) GroupRelationGroupIDs() (ids []int) {
	for id := range m.group_relation_group {
		ids = append(ids, id)
	}
	return
}

// ResetGroupRelationGroup resets all changes to the "group_relation_group" edge.
func (m *GroupMutation) ResetGroupRelationGroup() {
	m.group_relation_group = nil
	m.clearedgroup_relation_group = false
	m.removedgroup_relation_group = nil
}

// AddTargetMsgIDs adds the "target_msg" edge to the GroupMsg entity by ids.
func (m *GroupMutation) AddTargetMsgIDs(ids ...int) {
	if m.target_msg == nil {
		m.target_msg = make(map[int]struct{})
	}
	for i := range ids {
		m.target_msg[ids[i]] = struct{}{}
	}
}

// ClearTargetMsg clears the "target_msg" edge to the GroupMsg entity.
func (m *GroupMutation) ClearTargetMsg() {
	m.clearedtarget_msg = true
}

// TargetMsgCleared reports if the "target_msg" edge to the GroupMsg entity was cleared.
func (m *GroupMutation) TargetMsgCleared() bool {
	return m.clearedtarget_msg
}

// RemoveTargetMsgIDs removes the "target_msg" edge to the GroupMsg entity by IDs.
func (m *GroupMutation) RemoveTargetMsgIDs(ids ...int) {
	if m.removedtarget_msg == nil {
		m.removedtarget_msg = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.target_msg, ids[i])
		m.removedtarget_msg[ids[i]] = struct{}{}
	}
}

// RemovedTargetMsg returns the removed IDs of the "target_msg" edge to the GroupMsg entity.
func (m *GroupMutation) RemovedTargetMsgIDs() (ids []int) {
	for id := range m.removedtarget_msg {
		ids = append(ids, id)
	}
	return
}

// TargetMsgIDs returns the "target_msg" edge IDs in the mutation.
func (m *GroupMutation) TargetMsgIDs() (ids []int) {
	for id := range m.target_msg {
		ids = append(ids, id)
	}
	return
}

// ResetTargetMsg resets all changes to the "target_msg" edge.
func (m *GroupMutation) ResetTargetMsg() {
	m.target_msg = nil
	m.clearedtarget_msg = false
	m.removedtarget_msg = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, group.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, group.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.owner_user != nil {
		fields = append(fields, group.FieldUserID)
	}
	if m.img != nil {
		fields = append(fields, group.FieldImg)
	}
	if m.desc != nil {
		fields = append(fields, group.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldCreatedAt:
		return m.CreatedAt()
	case group.FieldUpdatedAt:
		return m.UpdatedAt()
	case group.FieldDeletedAt:
		return m.DeletedAt()
	case group.FieldName:
		return m.Name()
	case group.FieldUserID:
		return m.UserID()
	case group.FieldImg:
		return m.Img()
	case group.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case group.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case group.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldUserID:
		return m.OldUserID(ctx)
	case group.FieldImg:
		return m.OldImg(ctx)
	case group.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case group.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case group.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case group.FieldImg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImg(v)
		return nil
	case group.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(group.FieldDeletedAt) {
		fields = append(fields, group.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	switch name {
	case group.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case group.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case group.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldUserID:
		m.ResetUserID()
		return nil
	case group.FieldImg:
		m.ResetImg()
		return nil
	case group.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.owner_user != nil {
		edges = append(edges, group.EdgeOwnerUser)
	}
	if m.group_relation_group != nil {
		edges = append(edges, group.EdgeGroupRelationGroup)
	}
	if m.target_msg != nil {
		edges = append(edges, group.EdgeTargetMsg)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeOwnerUser:
		if id := m.owner_user; id != nil {
			return []ent.Value{*id}
		}
	case group.EdgeGroupRelationGroup:
		ids := make([]ent.Value, 0, len(m.group_relation_group))
		for id := range m.group_relation_group {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeTargetMsg:
		ids := make([]ent.Value, 0, len(m.target_msg))
		for id := range m.target_msg {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedgroup_relation_group != nil {
		edges = append(edges, group.EdgeGroupRelationGroup)
	}
	if m.removedtarget_msg != nil {
		edges = append(edges, group.EdgeTargetMsg)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeGroupRelationGroup:
		ids := make([]ent.Value, 0, len(m.removedgroup_relation_group))
		for id := range m.removedgroup_relation_group {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeTargetMsg:
		ids := make([]ent.Value, 0, len(m.removedtarget_msg))
		for id := range m.removedtarget_msg {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedowner_user {
		edges = append(edges, group.EdgeOwnerUser)
	}
	if m.clearedgroup_relation_group {
		edges = append(edges, group.EdgeGroupRelationGroup)
	}
	if m.clearedtarget_msg {
		edges = append(edges, group.EdgeTargetMsg)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeOwnerUser:
		return m.clearedowner_user
	case group.EdgeGroupRelationGroup:
		return m.clearedgroup_relation_group
	case group.EdgeTargetMsg:
		return m.clearedtarget_msg
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeOwnerUser:
		m.ClearOwnerUser()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeOwnerUser:
		m.ResetOwnerUser()
		return nil
	case group.EdgeGroupRelationGroup:
		m.ResetGroupRelationGroup()
		return nil
	case group.EdgeTargetMsg:
		m.ResetTargetMsg()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// GroupMsgMutation represents an operation that mutates the GroupMsg nodes in the graph.
type GroupMsgMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	media         *int
	addmedia      *int
	content       *string
	pic           *string
	url           *string
	desc          *string
	amount        *int
	addamount     *int
	_type         *int
	add_type      *int
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	group         *int
	clearedgroup  bool
	done          bool
	oldValue      func(context.Context) (*GroupMsg, error)
	predicates    []predicate.GroupMsg
}

var _ ent.Mutation = (*GroupMsgMutation)(nil)

// groupmsgOption allows management of the mutation configuration using functional options.
type groupmsgOption func(*GroupMsgMutation)

// newGroupMsgMutation creates new mutation for the GroupMsg entity.
func newGroupMsgMutation(c config, op Op, opts ...groupmsgOption) *GroupMsgMutation {
	m := &GroupMsgMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupMsg,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupMsgID sets the ID field of the mutation.
func withGroupMsgID(id int) groupmsgOption {
	return func(m *GroupMsgMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupMsg
		)
		m.oldValue = func(ctx context.Context) (*GroupMsg, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupMsg.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupMsg sets the old GroupMsg of the mutation.
func withGroupMsg(node *GroupMsg) groupmsgOption {
	return func(m *GroupMsgMutation) {
		m.oldValue = func(context.Context) (*GroupMsg, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMsgMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMsgMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMsgMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMsgMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupMsg.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMsgMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMsgMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMsgMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupMsgMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupMsgMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupMsgMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GroupMsgMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GroupMsgMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *GroupMsgMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[groupmsg.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *GroupMsgMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[groupmsg.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GroupMsgMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, groupmsg.FieldDeletedAt)
}

// SetOwnerID sets the "owner_id" field.
func (m *GroupMsgMutation) SetOwnerID(i int) {
	m.user = &i
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *GroupMsgMutation) OwnerID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldOwnerID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *GroupMsgMutation) ResetOwnerID() {
	m.user = nil
}

// SetTargetID sets the "target_id" field.
func (m *GroupMsgMutation) SetTargetID(i int) {
	m.group = &i
}

// TargetID returns the value of the "target_id" field in the mutation.
func (m *GroupMsgMutation) TargetID() (r int, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetID returns the old "target_id" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldTargetID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetID: %w", err)
	}
	return oldValue.TargetID, nil
}

// ResetTargetID resets all changes to the "target_id" field.
func (m *GroupMsgMutation) ResetTargetID() {
	m.group = nil
}

// SetMedia sets the "media" field.
func (m *GroupMsgMutation) SetMedia(i int) {
	m.media = &i
	m.addmedia = nil
}

// Media returns the value of the "media" field in the mutation.
func (m *GroupMsgMutation) Media() (r int, exists bool) {
	v := m.media
	if v == nil {
		return
	}
	return *v, true
}

// OldMedia returns the old "media" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldMedia(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedia is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedia requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedia: %w", err)
	}
	return oldValue.Media, nil
}

// AddMedia adds i to the "media" field.
func (m *GroupMsgMutation) AddMedia(i int) {
	if m.addmedia != nil {
		*m.addmedia += i
	} else {
		m.addmedia = &i
	}
}

// AddedMedia returns the value that was added to the "media" field in this mutation.
func (m *GroupMsgMutation) AddedMedia() (r int, exists bool) {
	v := m.addmedia
	if v == nil {
		return
	}
	return *v, true
}

// ResetMedia resets all changes to the "media" field.
func (m *GroupMsgMutation) ResetMedia() {
	m.media = nil
	m.addmedia = nil
}

// SetContent sets the "content" field.
func (m *GroupMsgMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *GroupMsgMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *GroupMsgMutation) ResetContent() {
	m.content = nil
}

// SetPic sets the "pic" field.
func (m *GroupMsgMutation) SetPic(s string) {
	m.pic = &s
}

// Pic returns the value of the "pic" field in the mutation.
func (m *GroupMsgMutation) Pic() (r string, exists bool) {
	v := m.pic
	if v == nil {
		return
	}
	return *v, true
}

// OldPic returns the old "pic" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldPic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPic: %w", err)
	}
	return oldValue.Pic, nil
}

// ResetPic resets all changes to the "pic" field.
func (m *GroupMsgMutation) ResetPic() {
	m.pic = nil
}

// SetURL sets the "url" field.
func (m *GroupMsgMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *GroupMsgMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *GroupMsgMutation) ResetURL() {
	m.url = nil
}

// SetDesc sets the "desc" field.
func (m *GroupMsgMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *GroupMsgMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *GroupMsgMutation) ResetDesc() {
	m.desc = nil
}

// SetAmount sets the "amount" field.
func (m *GroupMsgMutation) SetAmount(i int) {
	m.amount = &i
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *GroupMsgMutation) Amount() (r int, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds i to the "amount" field.
func (m *GroupMsgMutation) AddAmount(i int) {
	if m.addamount != nil {
		*m.addamount += i
	} else {
		m.addamount = &i
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *GroupMsgMutation) AddedAmount() (r int, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *GroupMsgMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetType sets the "type" field.
func (m *GroupMsgMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *GroupMsgMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the GroupMsg entity.
// If the GroupMsg object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMsgMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *GroupMsgMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *GroupMsgMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *GroupMsgMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *GroupMsgMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *GroupMsgMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[groupmsg.FieldOwnerID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GroupMsgMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *GroupMsgMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GroupMsgMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GroupMsgMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *GroupMsgMutation) SetGroupID(id int) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupMsgMutation) ClearGroup() {
	m.clearedgroup = true
	m.clearedFields[groupmsg.FieldTargetID] = struct{}{}
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupMsgMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *GroupMsgMutation) GroupID() (id int, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GroupMsgMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupMsgMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the GroupMsgMutation builder.
func (m *GroupMsgMutation) Where(ps ...predicate.GroupMsg) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMsgMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMsgMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupMsg, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMsgMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMsgMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupMsg).
func (m *GroupMsgMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMsgMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, groupmsg.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, groupmsg.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, groupmsg.FieldDeletedAt)
	}
	if m.user != nil {
		fields = append(fields, groupmsg.FieldOwnerID)
	}
	if m.group != nil {
		fields = append(fields, groupmsg.FieldTargetID)
	}
	if m.media != nil {
		fields = append(fields, groupmsg.FieldMedia)
	}
	if m.content != nil {
		fields = append(fields, groupmsg.FieldContent)
	}
	if m.pic != nil {
		fields = append(fields, groupmsg.FieldPic)
	}
	if m.url != nil {
		fields = append(fields, groupmsg.FieldURL)
	}
	if m.desc != nil {
		fields = append(fields, groupmsg.FieldDesc)
	}
	if m.amount != nil {
		fields = append(fields, groupmsg.FieldAmount)
	}
	if m._type != nil {
		fields = append(fields, groupmsg.FieldType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMsgMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupmsg.FieldCreatedAt:
		return m.CreatedAt()
	case groupmsg.FieldUpdatedAt:
		return m.UpdatedAt()
	case groupmsg.FieldDeletedAt:
		return m.DeletedAt()
	case groupmsg.FieldOwnerID:
		return m.OwnerID()
	case groupmsg.FieldTargetID:
		return m.TargetID()
	case groupmsg.FieldMedia:
		return m.Media()
	case groupmsg.FieldContent:
		return m.Content()
	case groupmsg.FieldPic:
		return m.Pic()
	case groupmsg.FieldURL:
		return m.URL()
	case groupmsg.FieldDesc:
		return m.Desc()
	case groupmsg.FieldAmount:
		return m.Amount()
	case groupmsg.FieldType:
		return m.GetType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMsgMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupmsg.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case groupmsg.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case groupmsg.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case groupmsg.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case groupmsg.FieldTargetID:
		return m.OldTargetID(ctx)
	case groupmsg.FieldMedia:
		return m.OldMedia(ctx)
	case groupmsg.FieldContent:
		return m.OldContent(ctx)
	case groupmsg.FieldPic:
		return m.OldPic(ctx)
	case groupmsg.FieldURL:
		return m.OldURL(ctx)
	case groupmsg.FieldDesc:
		return m.OldDesc(ctx)
	case groupmsg.FieldAmount:
		return m.OldAmount(ctx)
	case groupmsg.FieldType:
		return m.OldType(ctx)
	}
	return nil, fmt.Errorf("unknown GroupMsg field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMsgMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupmsg.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case groupmsg.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case groupmsg.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case groupmsg.FieldOwnerID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case groupmsg.FieldTargetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetID(v)
		return nil
	case groupmsg.FieldMedia:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedia(v)
		return nil
	case groupmsg.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case groupmsg.FieldPic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPic(v)
		return nil
	case groupmsg.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case groupmsg.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case groupmsg.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case groupmsg.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	}
	return fmt.Errorf("unknown GroupMsg field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMsgMutation) AddedFields() []string {
	var fields []string
	if m.addmedia != nil {
		fields = append(fields, groupmsg.FieldMedia)
	}
	if m.addamount != nil {
		fields = append(fields, groupmsg.FieldAmount)
	}
	if m.add_type != nil {
		fields = append(fields, groupmsg.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMsgMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case groupmsg.FieldMedia:
		return m.AddedMedia()
	case groupmsg.FieldAmount:
		return m.AddedAmount()
	case groupmsg.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMsgMutation) AddField(name string, value ent.Value) error {
	switch name {
	case groupmsg.FieldMedia:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMedia(v)
		return nil
	case groupmsg.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	case groupmsg.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown GroupMsg numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMsgMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(groupmsg.FieldDeletedAt) {
		fields = append(fields, groupmsg.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMsgMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMsgMutation) ClearField(name string) error {
	switch name {
	case groupmsg.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown GroupMsg nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMsgMutation) ResetField(name string) error {
	switch name {
	case groupmsg.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case groupmsg.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case groupmsg.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case groupmsg.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case groupmsg.FieldTargetID:
		m.ResetTargetID()
		return nil
	case groupmsg.FieldMedia:
		m.ResetMedia()
		return nil
	case groupmsg.FieldContent:
		m.ResetContent()
		return nil
	case groupmsg.FieldPic:
		m.ResetPic()
		return nil
	case groupmsg.FieldURL:
		m.ResetURL()
		return nil
	case groupmsg.FieldDesc:
		m.ResetDesc()
		return nil
	case groupmsg.FieldAmount:
		m.ResetAmount()
		return nil
	case groupmsg.FieldType:
		m.ResetType()
		return nil
	}
	return fmt.Errorf("unknown GroupMsg field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMsgMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, groupmsg.EdgeUser)
	}
	if m.group != nil {
		edges = append(edges, groupmsg.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMsgMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupmsg.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case groupmsg.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMsgMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMsgMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMsgMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, groupmsg.EdgeUser)
	}
	if m.clearedgroup {
		edges = append(edges, groupmsg.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMsgMutation) EdgeCleared(name string) bool {
	switch name {
	case groupmsg.EdgeUser:
		return m.cleareduser
	case groupmsg.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMsgMutation) ClearEdge(name string) error {
	switch name {
	case groupmsg.EdgeUser:
		m.ClearUser()
		return nil
	case groupmsg.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupMsg unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMsgMutation) ResetEdge(name string) error {
	switch name {
	case groupmsg.EdgeUser:
		m.ResetUser()
		return nil
	case groupmsg.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupMsg edge %s", name)
}

// GroupRelationMutation represents an operation that mutates the GroupRelation nodes in the graph.
type GroupRelationMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted_at    *time.Time
	_type         *int
	add_type      *int
	desc          *string
	clearedFields map[string]struct{}
	group         *int
	clearedgroup  bool
	user          *int
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*GroupRelation, error)
	predicates    []predicate.GroupRelation
}

var _ ent.Mutation = (*GroupRelationMutation)(nil)

// grouprelationOption allows management of the mutation configuration using functional options.
type grouprelationOption func(*GroupRelationMutation)

// newGroupRelationMutation creates new mutation for the GroupRelation entity.
func newGroupRelationMutation(c config, op Op, opts ...grouprelationOption) *GroupRelationMutation {
	m := &GroupRelationMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupRelation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupRelationID sets the ID field of the mutation.
func withGroupRelationID(id int) grouprelationOption {
	return func(m *GroupRelationMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupRelation
		)
		m.oldValue = func(ctx context.Context) (*GroupRelation, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupRelation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupRelation sets the old GroupRelation of the mutation.
func withGroupRelation(node *GroupRelation) grouprelationOption {
	return func(m *GroupRelationMutation) {
		m.oldValue = func(context.Context) (*GroupRelation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupRelationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupRelationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupRelationMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupRelationMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupRelation.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupRelationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupRelationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GroupRelation entity.
// If the GroupRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRelationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupRelationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupRelationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupRelationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GroupRelation entity.
// If the GroupRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRelationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupRelationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GroupRelationMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GroupRelationMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the GroupRelation entity.
// If the GroupRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRelationMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *GroupRelationMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[grouprelation.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *GroupRelationMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[grouprelation.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GroupRelationMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, grouprelation.FieldDeletedAt)
}

// SetGroupID sets the "group_id" field.
func (m *GroupRelationMutation) SetGroupID(i int) {
	m.group = &i
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *GroupRelationMutation) GroupID() (r int, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the GroupRelation entity.
// If the GroupRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRelationMutation) OldGroupID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *GroupRelationMutation) ResetGroupID() {
	m.group = nil
}

// SetUserID sets the "user_id" field.
func (m *GroupRelationMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GroupRelationMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the GroupRelation entity.
// If the GroupRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRelationMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GroupRelationMutation) ResetUserID() {
	m.user = nil
}

// SetType sets the "type" field.
func (m *GroupRelationMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *GroupRelationMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the GroupRelation entity.
// If the GroupRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRelationMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *GroupRelationMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *GroupRelationMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *GroupRelationMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetDesc sets the "desc" field.
func (m *GroupRelationMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *GroupRelationMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the GroupRelation entity.
// If the GroupRelation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupRelationMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *GroupRelationMutation) ResetDesc() {
	m.desc = nil
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupRelationMutation) ClearGroup() {
	m.clearedgroup = true
	m.clearedFields[grouprelation.FieldGroupID] = struct{}{}
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupRelationMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GroupRelationMutation) GroupIDs() (ids []int) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupRelationMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *GroupRelationMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[grouprelation.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GroupRelationMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GroupRelationMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GroupRelationMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the GroupRelationMutation builder.
func (m *GroupRelationMutation) Where(ps ...predicate.GroupRelation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupRelationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupRelationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupRelation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupRelationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupRelationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupRelation).
func (m *GroupRelationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupRelationMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, grouprelation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, grouprelation.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, grouprelation.FieldDeletedAt)
	}
	if m.group != nil {
		fields = append(fields, grouprelation.FieldGroupID)
	}
	if m.user != nil {
		fields = append(fields, grouprelation.FieldUserID)
	}
	if m._type != nil {
		fields = append(fields, grouprelation.FieldType)
	}
	if m.desc != nil {
		fields = append(fields, grouprelation.FieldDesc)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupRelationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case grouprelation.FieldCreatedAt:
		return m.CreatedAt()
	case grouprelation.FieldUpdatedAt:
		return m.UpdatedAt()
	case grouprelation.FieldDeletedAt:
		return m.DeletedAt()
	case grouprelation.FieldGroupID:
		return m.GroupID()
	case grouprelation.FieldUserID:
		return m.UserID()
	case grouprelation.FieldType:
		return m.GetType()
	case grouprelation.FieldDesc:
		return m.Desc()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupRelationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case grouprelation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case grouprelation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case grouprelation.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case grouprelation.FieldGroupID:
		return m.OldGroupID(ctx)
	case grouprelation.FieldUserID:
		return m.OldUserID(ctx)
	case grouprelation.FieldType:
		return m.OldType(ctx)
	case grouprelation.FieldDesc:
		return m.OldDesc(ctx)
	}
	return nil, fmt.Errorf("unknown GroupRelation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupRelationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case grouprelation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case grouprelation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case grouprelation.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case grouprelation.FieldGroupID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case grouprelation.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case grouprelation.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case grouprelation.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	}
	return fmt.Errorf("unknown GroupRelation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupRelationMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, grouprelation.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupRelationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case grouprelation.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupRelationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case grouprelation.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown GroupRelation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupRelationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(grouprelation.FieldDeletedAt) {
		fields = append(fields, grouprelation.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupRelationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupRelationMutation) ClearField(name string) error {
	switch name {
	case grouprelation.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown GroupRelation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupRelationMutation) ResetField(name string) error {
	switch name {
	case grouprelation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case grouprelation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case grouprelation.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case grouprelation.FieldGroupID:
		m.ResetGroupID()
		return nil
	case grouprelation.FieldUserID:
		m.ResetUserID()
		return nil
	case grouprelation.FieldType:
		m.ResetType()
		return nil
	case grouprelation.FieldDesc:
		m.ResetDesc()
		return nil
	}
	return fmt.Errorf("unknown GroupRelation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupRelationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.group != nil {
		edges = append(edges, grouprelation.EdgeGroup)
	}
	if m.user != nil {
		edges = append(edges, grouprelation.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupRelationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case grouprelation.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case grouprelation.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupRelationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupRelationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupRelationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgroup {
		edges = append(edges, grouprelation.EdgeGroup)
	}
	if m.cleareduser {
		edges = append(edges, grouprelation.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupRelationMutation) EdgeCleared(name string) bool {
	switch name {
	case grouprelation.EdgeGroup:
		return m.clearedgroup
	case grouprelation.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupRelationMutation) ClearEdge(name string) error {
	switch name {
	case grouprelation.EdgeGroup:
		m.ClearGroup()
		return nil
	case grouprelation.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown GroupRelation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupRelationMutation) ResetEdge(name string) error {
	switch name {
	case grouprelation.EdgeGroup:
		m.ResetGroup()
		return nil
	case grouprelation.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown GroupRelation edge %s", name)
}

// MessageMutation represents an operation that mutates the Message nodes in the graph.
type MessageMutation struct {
	config
	op               Op
	typ              string
	id               *int
	created_at       *time.Time
	updated_at       *time.Time
	deleted_at       *time.Time
	_type            *int
	add_type         *int
	media            *int
	addmedia         *int
	content          *string
	pic              *string
	url              *string
	desc             *string
	amount           *int
	addamount        *int
	clearedFields    map[string]struct{}
	sender           *int
	clearedsender    bool
	recipient        *int
	clearedrecipient bool
	done             bool
	oldValue         func(context.Context) (*Message, error)
	predicates       []predicate.Message
}

var _ ent.Mutation = (*MessageMutation)(nil)

// messageOption allows management of the mutation configuration using functional options.
type messageOption func(*MessageMutation)

// newMessageMutation creates new mutation for the Message entity.
func newMessageMutation(c config, op Op, opts ...messageOption) *MessageMutation {
	m := &MessageMutation{
		config:        c,
		op:            op,
		typ:           TypeMessage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMessageID sets the ID field of the mutation.
func withMessageID(id int) messageOption {
	return func(m *MessageMutation) {
		var (
			err   error
			once  sync.Once
			value *Message
		)
		m.oldValue = func(ctx context.Context) (*Message, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Message.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMessage sets the old Message of the mutation.
func withMessage(node *Message) messageOption {
	return func(m *MessageMutation) {
		m.oldValue = func(context.Context) (*Message, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MessageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MessageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MessageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MessageMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Message.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MessageMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MessageMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MessageMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MessageMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MessageMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MessageMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *MessageMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *MessageMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *MessageMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[message.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *MessageMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[message.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *MessageMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, message.FieldDeletedAt)
}

// SetType sets the "type" field.
func (m *MessageMutation) SetType(i int) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *MessageMutation) GetType() (r int, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *MessageMutation) AddType(i int) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *MessageMutation) AddedType() (r int, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *MessageMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetMedia sets the "media" field.
func (m *MessageMutation) SetMedia(i int) {
	m.media = &i
	m.addmedia = nil
}

// Media returns the value of the "media" field in the mutation.
func (m *MessageMutation) Media() (r int, exists bool) {
	v := m.media
	if v == nil {
		return
	}
	return *v, true
}

// OldMedia returns the old "media" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldMedia(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMedia is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMedia requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMedia: %w", err)
	}
	return oldValue.Media, nil
}

// AddMedia adds i to the "media" field.
func (m *MessageMutation) AddMedia(i int) {
	if m.addmedia != nil {
		*m.addmedia += i
	} else {
		m.addmedia = &i
	}
}

// AddedMedia returns the value that was added to the "media" field in this mutation.
func (m *MessageMutation) AddedMedia() (r int, exists bool) {
	v := m.addmedia
	if v == nil {
		return
	}
	return *v, true
}

// ResetMedia resets all changes to the "media" field.
func (m *MessageMutation) ResetMedia() {
	m.media = nil
	m.addmedia = nil
}

// SetContent sets the "content" field.
func (m *MessageMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *MessageMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *MessageMutation) ResetContent() {
	m.content = nil
}

// SetPic sets the "pic" field.
func (m *MessageMutation) SetPic(s string) {
	m.pic = &s
}

// Pic returns the value of the "pic" field in the mutation.
func (m *MessageMutation) Pic() (r string, exists bool) {
	v := m.pic
	if v == nil {
		return
	}
	return *v, true
}

// OldPic returns the old "pic" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldPic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPic: %w", err)
	}
	return oldValue.Pic, nil
}

// ResetPic resets all changes to the "pic" field.
func (m *MessageMutation) ResetPic() {
	m.pic = nil
}

// SetURL sets the "url" field.
func (m *MessageMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *MessageMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *MessageMutation) ResetURL() {
	m.url = nil
}

// SetDesc sets the "desc" field.
func (m *MessageMutation) SetDesc(s string) {
	m.desc = &s
}

// Desc returns the value of the "desc" field in the mutation.
func (m *MessageMutation) Desc() (r string, exists bool) {
	v := m.desc
	if v == nil {
		return
	}
	return *v, true
}

// OldDesc returns the old "desc" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDesc: %w", err)
	}
	return oldValue.Desc, nil
}

// ResetDesc resets all changes to the "desc" field.
func (m *MessageMutation) ResetDesc() {
	m.desc = nil
}

// SetAmount sets the "amount" field.
func (m *MessageMutation) SetAmount(i int) {
	m.amount = &i
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *MessageMutation) Amount() (r int, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldAmount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds i to the "amount" field.
func (m *MessageMutation) AddAmount(i int) {
	if m.addamount != nil {
		*m.addamount += i
	} else {
		m.addamount = &i
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *MessageMutation) AddedAmount() (r int, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *MessageMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetFormID sets the "form_id" field.
func (m *MessageMutation) SetFormID(i int) {
	m.sender = &i
}

// FormID returns the value of the "form_id" field in the mutation.
func (m *MessageMutation) FormID() (r int, exists bool) {
	v := m.sender
	if v == nil {
		return
	}
	return *v, true
}

// OldFormID returns the old "form_id" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldFormID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFormID: %w", err)
	}
	return oldValue.FormID, nil
}

// ResetFormID resets all changes to the "form_id" field.
func (m *MessageMutation) ResetFormID() {
	m.sender = nil
}

// SetTargetID sets the "target_id" field.
func (m *MessageMutation) SetTargetID(i int) {
	m.recipient = &i
}

// TargetID returns the value of the "target_id" field in the mutation.
func (m *MessageMutation) TargetID() (r int, exists bool) {
	v := m.recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetID returns the old "target_id" field's value of the Message entity.
// If the Message object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MessageMutation) OldTargetID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTargetID: %w", err)
	}
	return oldValue.TargetID, nil
}

// ResetTargetID resets all changes to the "target_id" field.
func (m *MessageMutation) ResetTargetID() {
	m.recipient = nil
}

// SetSenderID sets the "sender" edge to the User entity by id.
func (m *MessageMutation) SetSenderID(id int) {
	m.sender = &id
}

// ClearSender clears the "sender" edge to the User entity.
func (m *MessageMutation) ClearSender() {
	m.clearedsender = true
	m.clearedFields[message.FieldFormID] = struct{}{}
}

// SenderCleared reports if the "sender" edge to the User entity was cleared.
func (m *MessageMutation) SenderCleared() bool {
	return m.clearedsender
}

// SenderID returns the "sender" edge ID in the mutation.
func (m *MessageMutation) SenderID() (id int, exists bool) {
	if m.sender != nil {
		return *m.sender, true
	}
	return
}

// SenderIDs returns the "sender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) SenderIDs() (ids []int) {
	if id := m.sender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSender resets all changes to the "sender" edge.
func (m *MessageMutation) ResetSender() {
	m.sender = nil
	m.clearedsender = false
}

// SetRecipientID sets the "recipient" edge to the User entity by id.
func (m *MessageMutation) SetRecipientID(id int) {
	m.recipient = &id
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (m *MessageMutation) ClearRecipient() {
	m.clearedrecipient = true
	m.clearedFields[message.FieldTargetID] = struct{}{}
}

// RecipientCleared reports if the "recipient" edge to the User entity was cleared.
func (m *MessageMutation) RecipientCleared() bool {
	return m.clearedrecipient
}

// RecipientID returns the "recipient" edge ID in the mutation.
func (m *MessageMutation) RecipientID() (id int, exists bool) {
	if m.recipient != nil {
		return *m.recipient, true
	}
	return
}

// RecipientIDs returns the "recipient" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RecipientID instead. It exists only for internal usage by the builders.
func (m *MessageMutation) RecipientIDs() (ids []int) {
	if id := m.recipient; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRecipient resets all changes to the "recipient" edge.
func (m *MessageMutation) ResetRecipient() {
	m.recipient = nil
	m.clearedrecipient = false
}

// Where appends a list predicates to the MessageMutation builder.
func (m *MessageMutation) Where(ps ...predicate.Message) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MessageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MessageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Message, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MessageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MessageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Message).
func (m *MessageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MessageMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, message.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, message.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, message.FieldDeletedAt)
	}
	if m._type != nil {
		fields = append(fields, message.FieldType)
	}
	if m.media != nil {
		fields = append(fields, message.FieldMedia)
	}
	if m.content != nil {
		fields = append(fields, message.FieldContent)
	}
	if m.pic != nil {
		fields = append(fields, message.FieldPic)
	}
	if m.url != nil {
		fields = append(fields, message.FieldURL)
	}
	if m.desc != nil {
		fields = append(fields, message.FieldDesc)
	}
	if m.amount != nil {
		fields = append(fields, message.FieldAmount)
	}
	if m.sender != nil {
		fields = append(fields, message.FieldFormID)
	}
	if m.recipient != nil {
		fields = append(fields, message.FieldTargetID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MessageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case message.FieldCreatedAt:
		return m.CreatedAt()
	case message.FieldUpdatedAt:
		return m.UpdatedAt()
	case message.FieldDeletedAt:
		return m.DeletedAt()
	case message.FieldType:
		return m.GetType()
	case message.FieldMedia:
		return m.Media()
	case message.FieldContent:
		return m.Content()
	case message.FieldPic:
		return m.Pic()
	case message.FieldURL:
		return m.URL()
	case message.FieldDesc:
		return m.Desc()
	case message.FieldAmount:
		return m.Amount()
	case message.FieldFormID:
		return m.FormID()
	case message.FieldTargetID:
		return m.TargetID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MessageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case message.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case message.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case message.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case message.FieldType:
		return m.OldType(ctx)
	case message.FieldMedia:
		return m.OldMedia(ctx)
	case message.FieldContent:
		return m.OldContent(ctx)
	case message.FieldPic:
		return m.OldPic(ctx)
	case message.FieldURL:
		return m.OldURL(ctx)
	case message.FieldDesc:
		return m.OldDesc(ctx)
	case message.FieldAmount:
		return m.OldAmount(ctx)
	case message.FieldFormID:
		return m.OldFormID(ctx)
	case message.FieldTargetID:
		return m.OldTargetID(ctx)
	}
	return nil, fmt.Errorf("unknown Message field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case message.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case message.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case message.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case message.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case message.FieldMedia:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMedia(v)
		return nil
	case message.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	case message.FieldPic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPic(v)
		return nil
	case message.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case message.FieldDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDesc(v)
		return nil
	case message.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case message.FieldFormID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFormID(v)
		return nil
	case message.FieldTargetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTargetID(v)
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MessageMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, message.FieldType)
	}
	if m.addmedia != nil {
		fields = append(fields, message.FieldMedia)
	}
	if m.addamount != nil {
		fields = append(fields, message.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MessageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case message.FieldType:
		return m.AddedType()
	case message.FieldMedia:
		return m.AddedMedia()
	case message.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MessageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case message.FieldType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case message.FieldMedia:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMedia(v)
		return nil
	case message.FieldAmount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Message numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MessageMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(message.FieldDeletedAt) {
		fields = append(fields, message.FieldDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MessageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MessageMutation) ClearField(name string) error {
	switch name {
	case message.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown Message nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MessageMutation) ResetField(name string) error {
	switch name {
	case message.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case message.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case message.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case message.FieldType:
		m.ResetType()
		return nil
	case message.FieldMedia:
		m.ResetMedia()
		return nil
	case message.FieldContent:
		m.ResetContent()
		return nil
	case message.FieldPic:
		m.ResetPic()
		return nil
	case message.FieldURL:
		m.ResetURL()
		return nil
	case message.FieldDesc:
		m.ResetDesc()
		return nil
	case message.FieldAmount:
		m.ResetAmount()
		return nil
	case message.FieldFormID:
		m.ResetFormID()
		return nil
	case message.FieldTargetID:
		m.ResetTargetID()
		return nil
	}
	return fmt.Errorf("unknown Message field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MessageMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.sender != nil {
		edges = append(edges, message.EdgeSender)
	}
	if m.recipient != nil {
		edges = append(edges, message.EdgeRecipient)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MessageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case message.EdgeSender:
		if id := m.sender; id != nil {
			return []ent.Value{*id}
		}
	case message.EdgeRecipient:
		if id := m.recipient; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MessageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MessageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MessageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedsender {
		edges = append(edges, message.EdgeSender)
	}
	if m.clearedrecipient {
		edges = append(edges, message.EdgeRecipient)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MessageMutation) EdgeCleared(name string) bool {
	switch name {
	case message.EdgeSender:
		return m.clearedsender
	case message.EdgeRecipient:
		return m.clearedrecipient
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MessageMutation) ClearEdge(name string) error {
	switch name {
	case message.EdgeSender:
		m.ClearSender()
		return nil
	case message.EdgeRecipient:
		m.ClearRecipient()
		return nil
	}
	return fmt.Errorf("unknown Message unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MessageMutation) ResetEdge(name string) error {
	switch name {
	case message.EdgeSender:
		m.ResetSender()
		return nil
	case message.EdgeRecipient:
		m.ResetRecipient()
		return nil
	}
	return fmt.Errorf("unknown Message edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	created_at                 *time.Time
	updated_at                 *time.Time
	deleted_at                 *time.Time
	name                       *string
	password                   *string
	avatar                     *string
	phone                      *string
	email                      *string
	client_ip                  *string
	client_port                *string
	salt                       *string
	login_time                 *time.Time
	heartbeat_time             *time.Time
	logout_time                *time.Time
	is_logout                  *bool
	device_info                *string
	clearedFields              map[string]struct{}
	form_msg                   map[int]struct{}
	removedform_msg            map[int]struct{}
	clearedform_msg            bool
	target_msg                 map[int]struct{}
	removedtarget_msg          map[int]struct{}
	clearedtarget_msg          bool
	contact_owner              map[int]struct{}
	removedcontact_owner       map[int]struct{}
	clearedcontact_owner       bool
	contact_target             map[int]struct{}
	removedcontact_target      map[int]struct{}
	clearedcontact_target      bool
	group_relation_user        map[int]struct{}
	removedgroup_relation_user map[int]struct{}
	clearedgroup_relation_user bool
	group_owner                map[int]struct{}
	removedgroup_owner         map[int]struct{}
	clearedgroup_owner         bool
	group_msg                  map[int]struct{}
	removedgroup_msg           map[int]struct{}
	clearedgroup_msg           bool
	files                      map[int]struct{}
	removedfiles               map[int]struct{}
	clearedfiles               bool
	done                       bool
	oldValue                   func(context.Context) (*User, error)
	predicates                 []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetAvatar sets the "avatar" field.
func (m *UserMutation) SetAvatar(s string) {
	m.avatar = &s
}

// Avatar returns the value of the "avatar" field in the mutation.
func (m *UserMutation) Avatar() (r string, exists bool) {
	v := m.avatar
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatar returns the old "avatar" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatar: %w", err)
	}
	return oldValue.Avatar, nil
}

// ResetAvatar resets all changes to the "avatar" field.
func (m *UserMutation) ResetAvatar() {
	m.avatar = nil
}

// SetPhone sets the "phone" field.
func (m *UserMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the value of the "phone" field in the mutation.
func (m *UserMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old "phone" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// ResetPhone resets all changes to the "phone" field.
func (m *UserMutation) ResetPhone() {
	m.phone = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetClientIP sets the "client_ip" field.
func (m *UserMutation) SetClientIP(s string) {
	m.client_ip = &s
}

// ClientIP returns the value of the "client_ip" field in the mutation.
func (m *UserMutation) ClientIP() (r string, exists bool) {
	v := m.client_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldClientIP returns the old "client_ip" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldClientIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientIP: %w", err)
	}
	return oldValue.ClientIP, nil
}

// ResetClientIP resets all changes to the "client_ip" field.
func (m *UserMutation) ResetClientIP() {
	m.client_ip = nil
}

// SetClientPort sets the "client_port" field.
func (m *UserMutation) SetClientPort(s string) {
	m.client_port = &s
}

// ClientPort returns the value of the "client_port" field in the mutation.
func (m *UserMutation) ClientPort() (r string, exists bool) {
	v := m.client_port
	if v == nil {
		return
	}
	return *v, true
}

// OldClientPort returns the old "client_port" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldClientPort(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientPort: %w", err)
	}
	return oldValue.ClientPort, nil
}

// ResetClientPort resets all changes to the "client_port" field.
func (m *UserMutation) ResetClientPort() {
	m.client_port = nil
}

// SetSalt sets the "salt" field.
func (m *UserMutation) SetSalt(s string) {
	m.salt = &s
}

// Salt returns the value of the "salt" field in the mutation.
func (m *UserMutation) Salt() (r string, exists bool) {
	v := m.salt
	if v == nil {
		return
	}
	return *v, true
}

// OldSalt returns the old "salt" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSalt(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSalt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSalt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSalt: %w", err)
	}
	return oldValue.Salt, nil
}

// ResetSalt resets all changes to the "salt" field.
func (m *UserMutation) ResetSalt() {
	m.salt = nil
}

// SetLoginTime sets the "login_time" field.
func (m *UserMutation) SetLoginTime(t time.Time) {
	m.login_time = &t
}

// LoginTime returns the value of the "login_time" field in the mutation.
func (m *UserMutation) LoginTime() (r time.Time, exists bool) {
	v := m.login_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLoginTime returns the old "login_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLoginTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoginTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoginTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoginTime: %w", err)
	}
	return oldValue.LoginTime, nil
}

// ClearLoginTime clears the value of the "login_time" field.
func (m *UserMutation) ClearLoginTime() {
	m.login_time = nil
	m.clearedFields[user.FieldLoginTime] = struct{}{}
}

// LoginTimeCleared returns if the "login_time" field was cleared in this mutation.
func (m *UserMutation) LoginTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldLoginTime]
	return ok
}

// ResetLoginTime resets all changes to the "login_time" field.
func (m *UserMutation) ResetLoginTime() {
	m.login_time = nil
	delete(m.clearedFields, user.FieldLoginTime)
}

// SetHeartbeatTime sets the "heartbeat_time" field.
func (m *UserMutation) SetHeartbeatTime(t time.Time) {
	m.heartbeat_time = &t
}

// HeartbeatTime returns the value of the "heartbeat_time" field in the mutation.
func (m *UserMutation) HeartbeatTime() (r time.Time, exists bool) {
	v := m.heartbeat_time
	if v == nil {
		return
	}
	return *v, true
}

// OldHeartbeatTime returns the old "heartbeat_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHeartbeatTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHeartbeatTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHeartbeatTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeartbeatTime: %w", err)
	}
	return oldValue.HeartbeatTime, nil
}

// ClearHeartbeatTime clears the value of the "heartbeat_time" field.
func (m *UserMutation) ClearHeartbeatTime() {
	m.heartbeat_time = nil
	m.clearedFields[user.FieldHeartbeatTime] = struct{}{}
}

// HeartbeatTimeCleared returns if the "heartbeat_time" field was cleared in this mutation.
func (m *UserMutation) HeartbeatTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldHeartbeatTime]
	return ok
}

// ResetHeartbeatTime resets all changes to the "heartbeat_time" field.
func (m *UserMutation) ResetHeartbeatTime() {
	m.heartbeat_time = nil
	delete(m.clearedFields, user.FieldHeartbeatTime)
}

// SetLogoutTime sets the "logout_time" field.
func (m *UserMutation) SetLogoutTime(t time.Time) {
	m.logout_time = &t
}

// LogoutTime returns the value of the "logout_time" field in the mutation.
func (m *UserMutation) LogoutTime() (r time.Time, exists bool) {
	v := m.logout_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoutTime returns the old "logout_time" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLogoutTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoutTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoutTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoutTime: %w", err)
	}
	return oldValue.LogoutTime, nil
}

// ClearLogoutTime clears the value of the "logout_time" field.
func (m *UserMutation) ClearLogoutTime() {
	m.logout_time = nil
	m.clearedFields[user.FieldLogoutTime] = struct{}{}
}

// LogoutTimeCleared returns if the "logout_time" field was cleared in this mutation.
func (m *UserMutation) LogoutTimeCleared() bool {
	_, ok := m.clearedFields[user.FieldLogoutTime]
	return ok
}

// ResetLogoutTime resets all changes to the "logout_time" field.
func (m *UserMutation) ResetLogoutTime() {
	m.logout_time = nil
	delete(m.clearedFields, user.FieldLogoutTime)
}

// SetIsLogout sets the "is_logout" field.
func (m *UserMutation) SetIsLogout(b bool) {
	m.is_logout = &b
}

// IsLogout returns the value of the "is_logout" field in the mutation.
func (m *UserMutation) IsLogout() (r bool, exists bool) {
	v := m.is_logout
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLogout returns the old "is_logout" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsLogout(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLogout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLogout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLogout: %w", err)
	}
	return oldValue.IsLogout, nil
}

// ResetIsLogout resets all changes to the "is_logout" field.
func (m *UserMutation) ResetIsLogout() {
	m.is_logout = nil
}

// SetDeviceInfo sets the "device_info" field.
func (m *UserMutation) SetDeviceInfo(s string) {
	m.device_info = &s
}

// DeviceInfo returns the value of the "device_info" field in the mutation.
func (m *UserMutation) DeviceInfo() (r string, exists bool) {
	v := m.device_info
	if v == nil {
		return
	}
	return *v, true
}

// OldDeviceInfo returns the old "device_info" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeviceInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeviceInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeviceInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeviceInfo: %w", err)
	}
	return oldValue.DeviceInfo, nil
}

// ResetDeviceInfo resets all changes to the "device_info" field.
func (m *UserMutation) ResetDeviceInfo() {
	m.device_info = nil
}

// AddFormMsgIDs adds the "form_msg" edge to the Message entity by ids.
func (m *UserMutation) AddFormMsgIDs(ids ...int) {
	if m.form_msg == nil {
		m.form_msg = make(map[int]struct{})
	}
	for i := range ids {
		m.form_msg[ids[i]] = struct{}{}
	}
}

// ClearFormMsg clears the "form_msg" edge to the Message entity.
func (m *UserMutation) ClearFormMsg() {
	m.clearedform_msg = true
}

// FormMsgCleared reports if the "form_msg" edge to the Message entity was cleared.
func (m *UserMutation) FormMsgCleared() bool {
	return m.clearedform_msg
}

// RemoveFormMsgIDs removes the "form_msg" edge to the Message entity by IDs.
func (m *UserMutation) RemoveFormMsgIDs(ids ...int) {
	if m.removedform_msg == nil {
		m.removedform_msg = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.form_msg, ids[i])
		m.removedform_msg[ids[i]] = struct{}{}
	}
}

// RemovedFormMsg returns the removed IDs of the "form_msg" edge to the Message entity.
func (m *UserMutation) RemovedFormMsgIDs() (ids []int) {
	for id := range m.removedform_msg {
		ids = append(ids, id)
	}
	return
}

// FormMsgIDs returns the "form_msg" edge IDs in the mutation.
func (m *UserMutation) FormMsgIDs() (ids []int) {
	for id := range m.form_msg {
		ids = append(ids, id)
	}
	return
}

// ResetFormMsg resets all changes to the "form_msg" edge.
func (m *UserMutation) ResetFormMsg() {
	m.form_msg = nil
	m.clearedform_msg = false
	m.removedform_msg = nil
}

// AddTargetMsgIDs adds the "target_msg" edge to the Message entity by ids.
func (m *UserMutation) AddTargetMsgIDs(ids ...int) {
	if m.target_msg == nil {
		m.target_msg = make(map[int]struct{})
	}
	for i := range ids {
		m.target_msg[ids[i]] = struct{}{}
	}
}

// ClearTargetMsg clears the "target_msg" edge to the Message entity.
func (m *UserMutation) ClearTargetMsg() {
	m.clearedtarget_msg = true
}

// TargetMsgCleared reports if the "target_msg" edge to the Message entity was cleared.
func (m *UserMutation) TargetMsgCleared() bool {
	return m.clearedtarget_msg
}

// RemoveTargetMsgIDs removes the "target_msg" edge to the Message entity by IDs.
func (m *UserMutation) RemoveTargetMsgIDs(ids ...int) {
	if m.removedtarget_msg == nil {
		m.removedtarget_msg = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.target_msg, ids[i])
		m.removedtarget_msg[ids[i]] = struct{}{}
	}
}

// RemovedTargetMsg returns the removed IDs of the "target_msg" edge to the Message entity.
func (m *UserMutation) RemovedTargetMsgIDs() (ids []int) {
	for id := range m.removedtarget_msg {
		ids = append(ids, id)
	}
	return
}

// TargetMsgIDs returns the "target_msg" edge IDs in the mutation.
func (m *UserMutation) TargetMsgIDs() (ids []int) {
	for id := range m.target_msg {
		ids = append(ids, id)
	}
	return
}

// ResetTargetMsg resets all changes to the "target_msg" edge.
func (m *UserMutation) ResetTargetMsg() {
	m.target_msg = nil
	m.clearedtarget_msg = false
	m.removedtarget_msg = nil
}

// AddContactOwnerIDs adds the "contact_owner" edge to the Contact entity by ids.
func (m *UserMutation) AddContactOwnerIDs(ids ...int) {
	if m.contact_owner == nil {
		m.contact_owner = make(map[int]struct{})
	}
	for i := range ids {
		m.contact_owner[ids[i]] = struct{}{}
	}
}

// ClearContactOwner clears the "contact_owner" edge to the Contact entity.
func (m *UserMutation) ClearContactOwner() {
	m.clearedcontact_owner = true
}

// ContactOwnerCleared reports if the "contact_owner" edge to the Contact entity was cleared.
func (m *UserMutation) ContactOwnerCleared() bool {
	return m.clearedcontact_owner
}

// RemoveContactOwnerIDs removes the "contact_owner" edge to the Contact entity by IDs.
func (m *UserMutation) RemoveContactOwnerIDs(ids ...int) {
	if m.removedcontact_owner == nil {
		m.removedcontact_owner = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.contact_owner, ids[i])
		m.removedcontact_owner[ids[i]] = struct{}{}
	}
}

// RemovedContactOwner returns the removed IDs of the "contact_owner" edge to the Contact entity.
func (m *UserMutation) RemovedContactOwnerIDs() (ids []int) {
	for id := range m.removedcontact_owner {
		ids = append(ids, id)
	}
	return
}

// ContactOwnerIDs returns the "contact_owner" edge IDs in the mutation.
func (m *UserMutation) ContactOwnerIDs() (ids []int) {
	for id := range m.contact_owner {
		ids = append(ids, id)
	}
	return
}

// ResetContactOwner resets all changes to the "contact_owner" edge.
func (m *UserMutation) ResetContactOwner() {
	m.contact_owner = nil
	m.clearedcontact_owner = false
	m.removedcontact_owner = nil
}

// AddContactTargetIDs adds the "contact_target" edge to the Contact entity by ids.
func (m *UserMutation) AddContactTargetIDs(ids ...int) {
	if m.contact_target == nil {
		m.contact_target = make(map[int]struct{})
	}
	for i := range ids {
		m.contact_target[ids[i]] = struct{}{}
	}
}

// ClearContactTarget clears the "contact_target" edge to the Contact entity.
func (m *UserMutation) ClearContactTarget() {
	m.clearedcontact_target = true
}

// ContactTargetCleared reports if the "contact_target" edge to the Contact entity was cleared.
func (m *UserMutation) ContactTargetCleared() bool {
	return m.clearedcontact_target
}

// RemoveContactTargetIDs removes the "contact_target" edge to the Contact entity by IDs.
func (m *UserMutation) RemoveContactTargetIDs(ids ...int) {
	if m.removedcontact_target == nil {
		m.removedcontact_target = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.contact_target, ids[i])
		m.removedcontact_target[ids[i]] = struct{}{}
	}
}

// RemovedContactTarget returns the removed IDs of the "contact_target" edge to the Contact entity.
func (m *UserMutation) RemovedContactTargetIDs() (ids []int) {
	for id := range m.removedcontact_target {
		ids = append(ids, id)
	}
	return
}

// ContactTargetIDs returns the "contact_target" edge IDs in the mutation.
func (m *UserMutation) ContactTargetIDs() (ids []int) {
	for id := range m.contact_target {
		ids = append(ids, id)
	}
	return
}

// ResetContactTarget resets all changes to the "contact_target" edge.
func (m *UserMutation) ResetContactTarget() {
	m.contact_target = nil
	m.clearedcontact_target = false
	m.removedcontact_target = nil
}

// AddGroupRelationUserIDs adds the "group_relation_user" edge to the GroupRelation entity by ids.
func (m *UserMutation) AddGroupRelationUserIDs(ids ...int) {
	if m.group_relation_user == nil {
		m.group_relation_user = make(map[int]struct{})
	}
	for i := range ids {
		m.group_relation_user[ids[i]] = struct{}{}
	}
}

// ClearGroupRelationUser clears the "group_relation_user" edge to the GroupRelation entity.
func (m *UserMutation) ClearGroupRelationUser() {
	m.clearedgroup_relation_user = true
}

// GroupRelationUserCleared reports if the "group_relation_user" edge to the GroupRelation entity was cleared.
func (m *UserMutation) GroupRelationUserCleared() bool {
	return m.clearedgroup_relation_user
}

// RemoveGroupRelationUserIDs removes the "group_relation_user" edge to the GroupRelation entity by IDs.
func (m *UserMutation) RemoveGroupRelationUserIDs(ids ...int) {
	if m.removedgroup_relation_user == nil {
		m.removedgroup_relation_user = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.group_relation_user, ids[i])
		m.removedgroup_relation_user[ids[i]] = struct{}{}
	}
}

// RemovedGroupRelationUser returns the removed IDs of the "group_relation_user" edge to the GroupRelation entity.
func (m *UserMutation) RemovedGroupRelationUserIDs() (ids []int) {
	for id := range m.removedgroup_relation_user {
		ids = append(ids, id)
	}
	return
}

// GroupRelationUserIDs returns the "group_relation_user" edge IDs in the mutation.
func (m *UserMutation) GroupRelationUserIDs() (ids []int) {
	for id := range m.group_relation_user {
		ids = append(ids, id)
	}
	return
}

// ResetGroupRelationUser resets all changes to the "group_relation_user" edge.
func (m *UserMutation) ResetGroupRelationUser() {
	m.group_relation_user = nil
	m.clearedgroup_relation_user = false
	m.removedgroup_relation_user = nil
}

// AddGroupOwnerIDs adds the "group_owner" edge to the Group entity by ids.
func (m *UserMutation) AddGroupOwnerIDs(ids ...int) {
	if m.group_owner == nil {
		m.group_owner = make(map[int]struct{})
	}
	for i := range ids {
		m.group_owner[ids[i]] = struct{}{}
	}
}

// ClearGroupOwner clears the "group_owner" edge to the Group entity.
func (m *UserMutation) ClearGroupOwner() {
	m.clearedgroup_owner = true
}

// GroupOwnerCleared reports if the "group_owner" edge to the Group entity was cleared.
func (m *UserMutation) GroupOwnerCleared() bool {
	return m.clearedgroup_owner
}

// RemoveGroupOwnerIDs removes the "group_owner" edge to the Group entity by IDs.
func (m *UserMutation) RemoveGroupOwnerIDs(ids ...int) {
	if m.removedgroup_owner == nil {
		m.removedgroup_owner = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.group_owner, ids[i])
		m.removedgroup_owner[ids[i]] = struct{}{}
	}
}

// RemovedGroupOwner returns the removed IDs of the "group_owner" edge to the Group entity.
func (m *UserMutation) RemovedGroupOwnerIDs() (ids []int) {
	for id := range m.removedgroup_owner {
		ids = append(ids, id)
	}
	return
}

// GroupOwnerIDs returns the "group_owner" edge IDs in the mutation.
func (m *UserMutation) GroupOwnerIDs() (ids []int) {
	for id := range m.group_owner {
		ids = append(ids, id)
	}
	return
}

// ResetGroupOwner resets all changes to the "group_owner" edge.
func (m *UserMutation) ResetGroupOwner() {
	m.group_owner = nil
	m.clearedgroup_owner = false
	m.removedgroup_owner = nil
}

// AddGroupMsgIDs adds the "group_msg" edge to the GroupMsg entity by ids.
func (m *UserMutation) AddGroupMsgIDs(ids ...int) {
	if m.group_msg == nil {
		m.group_msg = make(map[int]struct{})
	}
	for i := range ids {
		m.group_msg[ids[i]] = struct{}{}
	}
}

// ClearGroupMsg clears the "group_msg" edge to the GroupMsg entity.
func (m *UserMutation) ClearGroupMsg() {
	m.clearedgroup_msg = true
}

// GroupMsgCleared reports if the "group_msg" edge to the GroupMsg entity was cleared.
func (m *UserMutation) GroupMsgCleared() bool {
	return m.clearedgroup_msg
}

// RemoveGroupMsgIDs removes the "group_msg" edge to the GroupMsg entity by IDs.
func (m *UserMutation) RemoveGroupMsgIDs(ids ...int) {
	if m.removedgroup_msg == nil {
		m.removedgroup_msg = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.group_msg, ids[i])
		m.removedgroup_msg[ids[i]] = struct{}{}
	}
}

// RemovedGroupMsg returns the removed IDs of the "group_msg" edge to the GroupMsg entity.
func (m *UserMutation) RemovedGroupMsgIDs() (ids []int) {
	for id := range m.removedgroup_msg {
		ids = append(ids, id)
	}
	return
}

// GroupMsgIDs returns the "group_msg" edge IDs in the mutation.
func (m *UserMutation) GroupMsgIDs() (ids []int) {
	for id := range m.group_msg {
		ids = append(ids, id)
	}
	return
}

// ResetGroupMsg resets all changes to the "group_msg" edge.
func (m *UserMutation) ResetGroupMsg() {
	m.group_msg = nil
	m.clearedgroup_msg = false
	m.removedgroup_msg = nil
}

// AddFileIDs adds the "files" edge to the File entity by ids.
func (m *UserMutation) AddFileIDs(ids ...int) {
	if m.files == nil {
		m.files = make(map[int]struct{})
	}
	for i := range ids {
		m.files[ids[i]] = struct{}{}
	}
}

// ClearFiles clears the "files" edge to the File entity.
func (m *UserMutation) ClearFiles() {
	m.clearedfiles = true
}

// FilesCleared reports if the "files" edge to the File entity was cleared.
func (m *UserMutation) FilesCleared() bool {
	return m.clearedfiles
}

// RemoveFileIDs removes the "files" edge to the File entity by IDs.
func (m *UserMutation) RemoveFileIDs(ids ...int) {
	if m.removedfiles == nil {
		m.removedfiles = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.files, ids[i])
		m.removedfiles[ids[i]] = struct{}{}
	}
}

// RemovedFiles returns the removed IDs of the "files" edge to the File entity.
func (m *UserMutation) RemovedFilesIDs() (ids []int) {
	for id := range m.removedfiles {
		ids = append(ids, id)
	}
	return
}

// FilesIDs returns the "files" edge IDs in the mutation.
func (m *UserMutation) FilesIDs() (ids []int) {
	for id := range m.files {
		ids = append(ids, id)
	}
	return
}

// ResetFiles resets all changes to the "files" edge.
func (m *UserMutation) ResetFiles() {
	m.files = nil
	m.clearedfiles = false
	m.removedfiles = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.avatar != nil {
		fields = append(fields, user.FieldAvatar)
	}
	if m.phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.client_ip != nil {
		fields = append(fields, user.FieldClientIP)
	}
	if m.client_port != nil {
		fields = append(fields, user.FieldClientPort)
	}
	if m.salt != nil {
		fields = append(fields, user.FieldSalt)
	}
	if m.login_time != nil {
		fields = append(fields, user.FieldLoginTime)
	}
	if m.heartbeat_time != nil {
		fields = append(fields, user.FieldHeartbeatTime)
	}
	if m.logout_time != nil {
		fields = append(fields, user.FieldLogoutTime)
	}
	if m.is_logout != nil {
		fields = append(fields, user.FieldIsLogout)
	}
	if m.device_info != nil {
		fields = append(fields, user.FieldDeviceInfo)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	case user.FieldName:
		return m.Name()
	case user.FieldPassword:
		return m.Password()
	case user.FieldAvatar:
		return m.Avatar()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldEmail:
		return m.Email()
	case user.FieldClientIP:
		return m.ClientIP()
	case user.FieldClientPort:
		return m.ClientPort()
	case user.FieldSalt:
		return m.Salt()
	case user.FieldLoginTime:
		return m.LoginTime()
	case user.FieldHeartbeatTime:
		return m.HeartbeatTime()
	case user.FieldLogoutTime:
		return m.LogoutTime()
	case user.FieldIsLogout:
		return m.IsLogout()
	case user.FieldDeviceInfo:
		return m.DeviceInfo()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldAvatar:
		return m.OldAvatar(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldClientIP:
		return m.OldClientIP(ctx)
	case user.FieldClientPort:
		return m.OldClientPort(ctx)
	case user.FieldSalt:
		return m.OldSalt(ctx)
	case user.FieldLoginTime:
		return m.OldLoginTime(ctx)
	case user.FieldHeartbeatTime:
		return m.OldHeartbeatTime(ctx)
	case user.FieldLogoutTime:
		return m.OldLogoutTime(ctx)
	case user.FieldIsLogout:
		return m.OldIsLogout(ctx)
	case user.FieldDeviceInfo:
		return m.OldDeviceInfo(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldAvatar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatar(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldClientIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientIP(v)
		return nil
	case user.FieldClientPort:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientPort(v)
		return nil
	case user.FieldSalt:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSalt(v)
		return nil
	case user.FieldLoginTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoginTime(v)
		return nil
	case user.FieldHeartbeatTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeartbeatTime(v)
		return nil
	case user.FieldLogoutTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoutTime(v)
		return nil
	case user.FieldIsLogout:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLogout(v)
		return nil
	case user.FieldDeviceInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeviceInfo(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.FieldCleared(user.FieldLoginTime) {
		fields = append(fields, user.FieldLoginTime)
	}
	if m.FieldCleared(user.FieldHeartbeatTime) {
		fields = append(fields, user.FieldHeartbeatTime)
	}
	if m.FieldCleared(user.FieldLogoutTime) {
		fields = append(fields, user.FieldLogoutTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case user.FieldLoginTime:
		m.ClearLoginTime()
		return nil
	case user.FieldHeartbeatTime:
		m.ClearHeartbeatTime()
		return nil
	case user.FieldLogoutTime:
		m.ClearLogoutTime()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldAvatar:
		m.ResetAvatar()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldClientIP:
		m.ResetClientIP()
		return nil
	case user.FieldClientPort:
		m.ResetClientPort()
		return nil
	case user.FieldSalt:
		m.ResetSalt()
		return nil
	case user.FieldLoginTime:
		m.ResetLoginTime()
		return nil
	case user.FieldHeartbeatTime:
		m.ResetHeartbeatTime()
		return nil
	case user.FieldLogoutTime:
		m.ResetLogoutTime()
		return nil
	case user.FieldIsLogout:
		m.ResetIsLogout()
		return nil
	case user.FieldDeviceInfo:
		m.ResetDeviceInfo()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.form_msg != nil {
		edges = append(edges, user.EdgeFormMsg)
	}
	if m.target_msg != nil {
		edges = append(edges, user.EdgeTargetMsg)
	}
	if m.contact_owner != nil {
		edges = append(edges, user.EdgeContactOwner)
	}
	if m.contact_target != nil {
		edges = append(edges, user.EdgeContactTarget)
	}
	if m.group_relation_user != nil {
		edges = append(edges, user.EdgeGroupRelationUser)
	}
	if m.group_owner != nil {
		edges = append(edges, user.EdgeGroupOwner)
	}
	if m.group_msg != nil {
		edges = append(edges, user.EdgeGroupMsg)
	}
	if m.files != nil {
		edges = append(edges, user.EdgeFiles)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFormMsg:
		ids := make([]ent.Value, 0, len(m.form_msg))
		for id := range m.form_msg {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTargetMsg:
		ids := make([]ent.Value, 0, len(m.target_msg))
		for id := range m.target_msg {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeContactOwner:
		ids := make([]ent.Value, 0, len(m.contact_owner))
		for id := range m.contact_owner {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeContactTarget:
		ids := make([]ent.Value, 0, len(m.contact_target))
		for id := range m.contact_target {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupRelationUser:
		ids := make([]ent.Value, 0, len(m.group_relation_user))
		for id := range m.group_relation_user {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupOwner:
		ids := make([]ent.Value, 0, len(m.group_owner))
		for id := range m.group_owner {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMsg:
		ids := make([]ent.Value, 0, len(m.group_msg))
		for id := range m.group_msg {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.files))
		for id := range m.files {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedform_msg != nil {
		edges = append(edges, user.EdgeFormMsg)
	}
	if m.removedtarget_msg != nil {
		edges = append(edges, user.EdgeTargetMsg)
	}
	if m.removedcontact_owner != nil {
		edges = append(edges, user.EdgeContactOwner)
	}
	if m.removedcontact_target != nil {
		edges = append(edges, user.EdgeContactTarget)
	}
	if m.removedgroup_relation_user != nil {
		edges = append(edges, user.EdgeGroupRelationUser)
	}
	if m.removedgroup_owner != nil {
		edges = append(edges, user.EdgeGroupOwner)
	}
	if m.removedgroup_msg != nil {
		edges = append(edges, user.EdgeGroupMsg)
	}
	if m.removedfiles != nil {
		edges = append(edges, user.EdgeFiles)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFormMsg:
		ids := make([]ent.Value, 0, len(m.removedform_msg))
		for id := range m.removedform_msg {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeTargetMsg:
		ids := make([]ent.Value, 0, len(m.removedtarget_msg))
		for id := range m.removedtarget_msg {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeContactOwner:
		ids := make([]ent.Value, 0, len(m.removedcontact_owner))
		for id := range m.removedcontact_owner {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeContactTarget:
		ids := make([]ent.Value, 0, len(m.removedcontact_target))
		for id := range m.removedcontact_target {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupRelationUser:
		ids := make([]ent.Value, 0, len(m.removedgroup_relation_user))
		for id := range m.removedgroup_relation_user {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupOwner:
		ids := make([]ent.Value, 0, len(m.removedgroup_owner))
		for id := range m.removedgroup_owner {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMsg:
		ids := make([]ent.Value, 0, len(m.removedgroup_msg))
		for id := range m.removedgroup_msg {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFiles:
		ids := make([]ent.Value, 0, len(m.removedfiles))
		for id := range m.removedfiles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedform_msg {
		edges = append(edges, user.EdgeFormMsg)
	}
	if m.clearedtarget_msg {
		edges = append(edges, user.EdgeTargetMsg)
	}
	if m.clearedcontact_owner {
		edges = append(edges, user.EdgeContactOwner)
	}
	if m.clearedcontact_target {
		edges = append(edges, user.EdgeContactTarget)
	}
	if m.clearedgroup_relation_user {
		edges = append(edges, user.EdgeGroupRelationUser)
	}
	if m.clearedgroup_owner {
		edges = append(edges, user.EdgeGroupOwner)
	}
	if m.clearedgroup_msg {
		edges = append(edges, user.EdgeGroupMsg)
	}
	if m.clearedfiles {
		edges = append(edges, user.EdgeFiles)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFormMsg:
		return m.clearedform_msg
	case user.EdgeTargetMsg:
		return m.clearedtarget_msg
	case user.EdgeContactOwner:
		return m.clearedcontact_owner
	case user.EdgeContactTarget:
		return m.clearedcontact_target
	case user.EdgeGroupRelationUser:
		return m.clearedgroup_relation_user
	case user.EdgeGroupOwner:
		return m.clearedgroup_owner
	case user.EdgeGroupMsg:
		return m.clearedgroup_msg
	case user.EdgeFiles:
		return m.clearedfiles
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFormMsg:
		m.ResetFormMsg()
		return nil
	case user.EdgeTargetMsg:
		m.ResetTargetMsg()
		return nil
	case user.EdgeContactOwner:
		m.ResetContactOwner()
		return nil
	case user.EdgeContactTarget:
		m.ResetContactTarget()
		return nil
	case user.EdgeGroupRelationUser:
		m.ResetGroupRelationUser()
		return nil
	case user.EdgeGroupOwner:
		m.ResetGroupOwner()
		return nil
	case user.EdgeGroupMsg:
		m.ResetGroupMsg()
		return nil
	case user.EdgeFiles:
		m.ResetFiles()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
